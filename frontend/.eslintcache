[{"/Users/miranda/GitHub/cs554-music-platform/frontend/src/index.js":"1","/Users/miranda/GitHub/cs554-music-platform/frontend/src/components/playListbyLoveSongs.js":"2","/Users/miranda/GitHub/cs554-music-platform/frontend/src/components/SearchPlayList.js":"3","/Users/miranda/GitHub/cs554-music-platform/frontend/src/components/ChangePassword.js":"4","/Users/miranda/GitHub/cs554-music-platform/frontend/src/components/SignUp.js":"5","/Users/miranda/GitHub/cs554-music-platform/frontend/src/app/index.js":"6","/Users/miranda/GitHub/cs554-music-platform/frontend/src/components/SignIn.js":"7","/Users/miranda/GitHub/cs554-music-platform/frontend/src/firebase/FirebaseFunctions.js":"8","/Users/miranda/GitHub/cs554-music-platform/frontend/src/pages/UserProfile.jsx":"9","/Users/miranda/GitHub/cs554-music-platform/frontend/src/components/UploadImage.js":"10","/Users/miranda/GitHub/cs554-music-platform/frontend/src/components/playAlbum.js":"11","/Users/miranda/GitHub/cs554-music-platform/frontend/src/firebase/Auth.js":"12"},{"size":171,"mtime":1607120866853,"results":"13","hashOfConfig":"14"},{"size":6200,"mtime":1607564916253,"results":"15","hashOfConfig":"14"},{"size":6896,"mtime":1607564916252,"results":"16","hashOfConfig":"14"},{"size":3487,"mtime":1607124228752,"results":"17","hashOfConfig":"14"},{"size":3591,"mtime":1607120866851,"results":"18","hashOfConfig":"14"},{"size":3156,"mtime":1607567313940,"results":"19","hashOfConfig":"14"},{"size":2724,"mtime":1607120866850,"results":"20","hashOfConfig":"14"},{"size":3974,"mtime":1607569933604,"results":"21","hashOfConfig":"14"},{"size":8896,"mtime":1607570239289,"results":"22","hashOfConfig":"14"},{"size":1063,"mtime":1607573905538,"results":"23","hashOfConfig":"14"},{"size":6842,"mtime":1607564916252,"results":"24","hashOfConfig":"14"},{"size":671,"mtime":1607120866852,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"13u9b",{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/miranda/GitHub/cs554-music-platform/frontend/src/index.js",[],["55","56"],"/Users/miranda/GitHub/cs554-music-platform/frontend/src/components/playListbyLoveSongs.js",["57","58","59"],"import React, { useContext, useState, useEffect } from 'react'\nimport {\n    Card,\n    CardActionArea,\n    CardContent,\n    Grid,\n    Typography,\n    makeStyles,\n    Button,\n} from '@material-ui/core'\nimport SpotifyWebApi from 'spotify-web-api-js'\nimport { AuthContext } from '../firebase/Auth'\nimport AddPostModal from './Modals/AddPostModal'\n\nlet Spotify = require('spotify-web-api-js')\n// var s = new Spotify();\n\nlet spotifyApi = new SpotifyWebApi()\n\nspotifyApi.setAccessToken(\n    'BQBclgNt0TcT10snXjsw5KbLGIxzuCjtTyLeU9mX-knZrueTkSrKnq1JJ-G_ncLoJUyhBIKfqn_YB2mwy5mWSHbxaTj3-BqgPPG-tRGDauzL-OkAkfJMyhsBaNi3Rj6FLPx2P5ESnf_S_eW6rOO7ZqVU4Ct8NQ35dnMJVHfOw9Rrm-P5'\n)\n\nconst useStyles = makeStyles({\n    card: {\n        maxWidth: 350,\n        height: 'auto',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        borderRadius: 5,\n        border: '1px solid #1e8678',\n        boxShadow:\n            '0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);',\n    },\n    titleHead: {\n        borderBottom: '1px solid #1e8678',\n        fontWeight: 'bold',\n        Color: 'black !important',\n    },\n    grid: {\n        flexGrow: 1,\n        flexDirection: 'row',\n    },\n\n    modal: {\n        top: '50%',\n        left: '20%',\n        right: 'auto',\n        // bottom: '90%',\n        marginRight: '50%',\n        transform: 'translate(10%, -50%)',\n        width: '50%',\n        // border: '1px solid #28547a',\n        borderRadius: '4px',\n        float: 'left',\n        // background:'lightblue'\n    },\n\n    textFieldStyle: {\n        left: '.5%',\n        right: '.5%',\n        top: '.5%',\n        bottom: '25%',\n        width: '90%',\n        margin: 'auto',\n        background: 'white',\n    },\n\n    buttonClass: {\n        marginLeft: '40%',\n    },\n})\n\nconst PlayListByLoveSongs = (props) => {\n    const [playListData, setPlayListData] = useState(undefined)\n    const classes = useStyles()\n    const [hasError, setHasError] = useState(false)\n    const [loading, setLoading] = useState(true)\n    const [sharePost, setSharePost] = useState(null)\n    const [showSharePostModal, setShowSharePostModal] = useState(null)\n\n    const { currentUser } = useContext(AuthContext)\n\n    let card = null\n    useEffect(() => {\n        async function fetchData() {\n            try {\n                spotifyApi.searchTracks('Love',{country:'us'}).then(\n                    function (data) {\n                        setPlayListData(data.tracks.items)\n                        setLoading(false)\n                    },\n                    function (err) {\n                        setHasError(err)\n                    }\n                )\n            } catch (e) {\n                setHasError(e.message)\n            }\n        }\n        fetchData()\n    }, [])\n\n    const handleOpenshareModal = (trackDetails) => {\n        setShowSharePostModal(true)\n        setSharePost(trackDetails)\n        console.log(trackDetails)\n    }\n\n    const handleCloseModals = () => {\n        setShowSharePostModal(false)\n    }\n\n    const buildCard = (playList) => {\n        return (\n            <Grid item xs={12} sm={6} md={4} lg={4} xl={2} key={playList.id}>\n                <Card className={classes.card} variant=\"outlined\">\n                    <CardActionArea>\n                        <a href={playList.external_urls.spotify}>\n                            Go to Spotify\n                        </a>\n                        <CardContent>\n                            <Typography\n                                className={classes.titleHead}\n                                gutterBottom\n                                variant=\"h6\"\n                                component=\"h3\"\n                            >\n                                <span>{playList.name}</span>\n                                <br />\n                                <span>Popularity: {playList.popularity}</span>\n                            </Typography>\n                        </CardContent>\n                    </CardActionArea>\n                    <iframe\n                        id=\"playSong\"\n                        src={\n                            'https://open.spotify.com/embed?uri=' + playList.uri\n                        }\n                        width=\"300\"\n                        height=\"380\"\n                        frameborder=\"0\"\n                        allowtransparency=\"true\"\n                        allow=\"encrypted-media\"\n                    ></iframe>\n                    <div className=\"e-card-actions e-card-vertical\">\n                        <Button\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            className={classes.buttonClass}\n                            onClick={() => {\n                                handleOpenshareModal(playList)\n                            }}\n                        >\n                            share\n                        </Button>\n                    </div>\n                    {showSharePostModal && (\n                        <AddPostModal\n                            isOpen={showSharePostModal}\n                            handleClose={handleCloseModals}\n                            title={'Share Post'}\n                            data={null}\n                            currentUser={currentUser.uid}\n                            songData={sharePost}\n                            postId={null}\n                        />\n                    )}\n                </Card>\n            </Grid>\n        )\n    }\n    if (playListData) {\n        console.log(playListData)\n        card =\n            playListData &&\n            playListData\n                .filter((x) =>\n                    x.available_markets.some((y) => y.includes('US'))\n                )\n                .map((playList) => {\n                    return buildCard(playList)\n                })\n    }\n\n    if (loading) {\n        return (\n            <div>\n                <h2>Loading....</h2>\n            </div>\n        )\n    } else {\n        return (\n            <div class=\"main\">\n                <Grid container className={classes.grid} spacing={5}>\n                    {card}\n                </Grid>\n            </div>\n        )\n    }\n}\n\nexport default PlayListByLoveSongs\n","/Users/miranda/GitHub/cs554-music-platform/frontend/src/components/SearchPlayList.js",["60","61","62"],"import React, { useContext, useState, useEffect } from 'react'\nimport {\n    Card,\n    CardActionArea,\n    CardContent,\n    Grid,\n    Typography,\n    makeStyles,\n    Button,\n} from '@material-ui/core'\nimport SpotifyWebApi from 'spotify-web-api-js'\nimport { AuthContext } from '../firebase/Auth'\nimport AddPostModal from './Modals/AddPostModal'\nimport SearchComponent  from './SearchComponent'\nimport ShowErrorModal from './Modals/ShowErrorModal'\n\nlet Spotify = require('spotify-web-api-js')\n// var s = new Spotify();\n\nlet spotifyApi = new SpotifyWebApi()\n\nspotifyApi.setAccessToken(\n    'BQD4dH1FxEk_x75QeJq2Qlrk-lWu5Obvq4q4vB-D_B6hEF8xYdTPlRoQ7UawSPqqqE2wy0qJ-YO-WYA5NaheFM06FZfVWZqn3lDrQFKCX-inV4BWZLCo2fBxF8MAzD63CiUaTCAjFVK7rCEvpfnEEkXkriijfgHYJZ_wc8ZZaapwKKuC'\n)\n\nconst useStyles = makeStyles({\n    card: {\n        maxWidth: 350,\n        height: 'auto',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        borderRadius: 5,\n        border: '1px solid #1e8678',\n        boxShadow:\n            '0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);',\n    },\n    titleHead: {\n        borderBottom: '1px solid #1e8678',\n        fontWeight: 'bold',\n        Color: 'black !important',\n    },\n    grid: {\n        flexGrow: 1,\n        flexDirection: 'row',\n    },\n\n    modal: {\n        top: '50%',\n        left: '20%',\n        right: 'auto',\n        // bottom: '90%',\n        marginRight: '50%',\n        transform: 'translate(10%, -50%)',\n        width: '50%',\n        // border: '1px solid #28547a',\n        borderRadius: '4px',\n        float: 'left',\n        // background:'lightblue'\n    },\n\n    textFieldStyle: {\n        left: '.5%',\n        right: '.5%',\n        top: '.5%',\n        bottom: '25%',\n        width: '90%',\n        margin: 'auto',\n        background: 'white',\n    },\n\n    buttonClass: {\n        marginLeft: '40%',\n    },\n})\n\nconst SearchPlayList = (props) => {\n    const [playListData, setPlayListData] = useState(undefined)\n    const classes = useStyles()\n    const [hasError, setHasError] = useState(false)\n    const [loading, setLoading] = useState(true)\n    const [sharePost, setSharePost] = useState(null)\n    const [showSharePostModal, setShowSharePostModal] = useState(null)\n    const [searchTerm, setSearchTerm ] = useState('Love')\n    const [errorModal, setErrorModal] = useState(false)\n\n    const { currentUser } = useContext(AuthContext)\n\n    let card = null\n    useEffect(() => {\n        async function fetchData() {\n            try {\n                spotifyApi.searchTracks(searchTerm,{country:'US'}).then(\n                    function (data) {\n                        setPlayListData(data.tracks.items)\n                        setLoading(false)\n                    },\n                    function (err) {\n                        setHasError(err)\n                    }\n                )\n            } catch (e) {\n                setHasError(e.message)\n            }\n        }\n        fetchData()\n    }, [searchTerm])\n\n    const handleOpenshareModal = (trackDetails) => {\n        setShowSharePostModal(true)\n        setSharePost(trackDetails)\n        console.log(trackDetails)\n        setErrorModal(true)\n    }\n\n    const handleCloseModals = () => {\n        setShowSharePostModal(false)\n        setErrorModal(false)\n    }\n\n\n    const searchValue = async (value) => {\n        setSearchTerm(value);\t\n    };\n\n    const buildCard = (playList) => {\n        return (\n\n            <Grid item xs={12} sm={6} md={4} lg={4} xl={2} key={playList.id}>\n                <Card className={classes.card} variant=\"outlined\">\n                    <CardActionArea>\n                        <a href={playList.external_urls.spotify}>\n                            Go to Spotify\n                        </a>\n                        <CardContent>\n                            <Typography\n                                className={classes.titleHead}\n                                gutterBottom\n                                variant=\"h6\"\n                                component=\"h3\"\n                            >\n                                <span>{playList.name}</span>\n                                <br />\n                                <span>Popularity: {playList.popularity}</span>\n                            </Typography>\n                        </CardContent>\n                    </CardActionArea>\n                    <iframe\n                        id=\"playSong\"\n                        src={\n                            'https://open.spotify.com/embed?uri=' + playList.uri\n                        }\n                        width=\"300\"\n                        height=\"380\"\n                        frameborder=\"0\"\n                        allowtransparency=\"true\"\n                        allow=\"encrypted-media\"\n                    ></iframe>\n                    <div className=\"e-card-actions e-card-vertical\">\n                    <Button\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            className={classes.buttonClass}\n                            onClick={() => {\n                                handleOpenshareModal(playList)\n                            }}\n                        >\n                            share\n                        </Button>\n                    </div>\n                </Card>\n            </Grid>\n        )\n    }\n    if (playListData) {\n        console.log(playListData)\n        card =\n            playListData &&\n            playListData\n                .filter((x) =>\n                    x.available_markets.some((y) => y.includes('US'))\n                )\n                .map((playList) => {\n                    return buildCard(playList)\n                })\n    }\n\n    if (loading) {\n        return (\n            <div>\n                <h2>Loading....</h2>\n            </div>\n        )\n    } else {\n        return (\n            <div class=\"main\">\n            <br/>\n                <div>\n                    <SearchComponent searchValue={searchValue} searchTerm = {searchTerm} />\n                </div>\n                <br/>\n                <Grid container className={classes.grid} spacing={5}>\n                    {card}\n                </Grid>\n                \n            {currentUser ? (showSharePostModal && (\n                <AddPostModal\n                    isOpen={showSharePostModal}\n                    handleClose={handleCloseModals}\n                    title={'Share Post'}\n                    data={null}\n                    currentUser={currentUser.uid}\n                    songData={sharePost}\n                    postId={null}\n                />\n            )) : errorModal && (\n                <ShowErrorModal\n                    isOpen={errorModal}\n                    handleClose={handleCloseModals}\n                    title={'Login Error'}\n                />\n            )}\n            </div>\n        )\n    }\n}\n\nexport default SearchPlayList\n","/Users/miranda/GitHub/cs554-music-platform/frontend/src/components/ChangePassword.js",[],["63","64"],"/Users/miranda/GitHub/cs554-music-platform/frontend/src/components/SignUp.js",[],"/Users/miranda/GitHub/cs554-music-platform/frontend/src/app/index.js",[],"/Users/miranda/GitHub/cs554-music-platform/frontend/src/components/SignIn.js",[],"/Users/miranda/GitHub/cs554-music-platform/frontend/src/firebase/FirebaseFunctions.js",[],"/Users/miranda/GitHub/cs554-music-platform/frontend/src/pages/UserProfile.jsx",[],"/Users/miranda/GitHub/cs554-music-platform/frontend/src/components/UploadImage.js",[],"/Users/miranda/GitHub/cs554-music-platform/frontend/src/components/playAlbum.js",["65","66"],"import React, { useContext, useState, useEffect } from 'react'\nimport {\n    Card,\n    CardActionArea,\n    CardContent,\n    Grid,\n    Typography,\n    makeStyles,\n    Button,\n} from '@material-ui/core'\nimport SpotifyWebApi from 'spotify-web-api-js'\nimport { AuthContext } from '../firebase/Auth'\nimport AddPostModal from './Modals/AddPostModal'\n\nlet Spotify = require('spotify-web-api-js')\n// var s = new Spotify();\n\nlet spotifyApi = new SpotifyWebApi()\n\nspotifyApi.setAccessToken(\n    'BQBclgNt0TcT10snXjsw5KbLGIxzuCjtTyLeU9mX-knZrueTkSrKnq1JJ-G_ncLoJUyhBIKfqn_YB2mwy5mWSHbxaTj3-BqgPPG-tRGDauzL-OkAkfJMyhsBaNi3Rj6FLPx2P5ESnf_S_eW6rOO7ZqVU4Ct8NQ35dnMJVHfOw9Rrm-P5'\n)\n\nconst useStyles = makeStyles({\n    card: {\n        maxWidth: 350,\n        height: 'auto',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        borderRadius: 5,\n        border: '1px solid #1e8678',\n        boxShadow:\n            '0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);',\n    },\n    titleHead: {\n        borderBottom: '1px solid #1e8678',\n        fontWeight: 'bold',\n        Color: 'black !important',\n    },\n    grid: {\n        flexGrow: 1,\n        flexDirection: 'row',\n    },\n    modal: {\n        top: '50%',\n        left: '20%',\n        right: 'auto',\n        // bottom: '90%',\n        marginRight: '50%',\n        transform: 'translate(10%, -50%)',\n        width: '50%',\n        // border: '1px solid #28547a',\n        borderRadius: '4px',\n        float: 'left',\n        // background:'lightblue'\n    },\n\n    textFieldStyle: {\n        left: '.5%',\n        right: '.5%',\n        top: '.5%',\n        bottom: '25%',\n        width: '90%',\n        margin: 'auto',\n        background: 'white',\n    },\n\n    buttonClass: {\n        marginLeft: '40%',\n    },\n})\n\nconst PlayAlbum = (props) => {\n    const [albumData, setAlbumtData] = useState(undefined)\n    const classes = useStyles()\n    const [hasError, setHasError] = useState(false)\n    const [loading, setLoading] = useState(true)\n    const [sharePost, setSharePost] = useState(null)\n    const [showSharePostModal, setShowSharePostModal] = useState(null)\n\n    let card = null\n\n    const { currentUser } = useContext(AuthContext)\n\n    useEffect(() => {\n        console.log('on load useeffect')\n        async function fetchData() {\n            try {\n                spotifyApi.getAlbum('5U4W9E5WsYb2jUQWePT8Xm').then(\n                    function (data) {\n                        setAlbumtData(data.tracks.items)\n                        setLoading(false)\n                    },\n                    function (err) {\n                        setHasError(err)\n                    }\n                )\n            } catch (e) {\n                setHasError(e.message)\n            }\n        }\n        fetchData()\n    }, [])\n\n    const handleOpenshareModal = (trackDetails) => {\n        setShowSharePostModal(true)\n        setSharePost(trackDetails)\n        console.log(trackDetails)\n    }\n\n    const handleCloseModals = () => {\n        setShowSharePostModal(false)\n    }\n\n    const buildCard = (album) => {\n        return (\n            <Grid item xs={12} sm={6} md={4} lg={4} xl={2} key={album.id}>\n                <Card className={classes.card} variant=\"outlined\">\n                    <CardActionArea>\n                        <a href={album.external_urls.spotify}>Go to Spotify</a>\n                        <CardContent>\n                            <Typography\n                                className={classes.titleHead}\n                                gutterBottom\n                                variant=\"h6\"\n                                component=\"h3\"\n                            >\n                                <span>{album.name}</span>\n                                <br />\n                                <span>Track Number: {album.track_number}</span>\n                            </Typography>\n                        </CardContent>\n                    </CardActionArea>\n                    <iframe\n                        id=\"playSong\"\n                        src={'https://open.spotify.com/embed?uri=' + album.uri}\n                        width=\"300\"\n                        height=\"380\"\n                        frameborder=\"0\"\n                        allowtransparency=\"true\"\n                        allow=\"encrypted-media\"\n                    ></iframe>\n                    <div className=\"e-card-actions e-card-vertical\">\n                        <Button\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            className={classes.buttonClass}\n                            onClick={() => {\n                                handleOpenshareModal(album)\n                            }}\n                        >\n                            share\n                        </Button>\n                    </div>\n                    {showSharePostModal && (\n                        <AddPostModal\n                            isOpen={showSharePostModal}\n                            handleClose={handleCloseModals}\n                            title={'Share Post'}\n                            data={null}\n                            currentUser={currentUser.uid}\n                            songData={sharePost}\n                            postId={null}\n                        />\n                    )}\n                </Card>\n            </Grid>\n        )\n    }\n    if (albumData) {\n        console.log(albumData)\n        card =\n            albumData &&\n            albumData.map((album) => {\n                return buildCard(album)\n            })\n    }\n\n    if (loading) {\n        return (\n            <div>\n                <h2>Loading....</h2>\n            </div>\n        )\n    }\n    if (hasError) {\n        return <div>{hasError}</div>\n    } else {\n        return (\n            <div class=\"main\">\n                <>\n                    {/* <Modal className={classes.modal} show={showSharePostModal} onHide={handleCloseModals}>\n\t\t\t  <Modal.Header closeButton>\n\t\t\t\t<Modal.Title>Modal heading</Modal.Title>\n\t\t\t  </Modal.Header>\n\t\t\t \n\t\t\t  <Modal.Body>\n\t\t\t  <textarea className={classes.textFieldStyle} type='text' placeholder=\"Enter description here....\" rows=\"2\" /> \n\t\t\t  <textarea className={classes.textFieldStyle} value={sharePost? 'name:'+sharePost.name+' href:'+sharePost.external_urls.spotify+' id:'+sharePost.id : ''} rows=\"4\"></textarea></Modal.Body>\n\t\t\t  <Modal.Footer>\n\t\t\t\t<Button variant=\"contained\" color='secondary' onClick={handleCloseModals}>\n\t\t\t\t  Close\n\t\t\t\t</Button>\n\t\t\t\t<Button variant=\"contained\" color='primary'  onClick={handleCloseModals}>\n\t\t\t\t  Save Changes\n\t\t\t\t</Button>\n\t\t\t  </Modal.Footer>\n\t\t\t</Modal> */}\n                </>\n\n                <Grid container className={classes.grid} spacing={5}>\n                    {card}\n                </Grid>\n            </div>\n        )\n    }\n}\n\nexport default PlayAlbum\n","/Users/miranda/GitHub/cs554-music-platform/frontend/src/firebase/Auth.js",[],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":15,"column":5,"nodeType":"73","messageId":"74","endLine":15,"endColumn":12},{"ruleId":"71","severity":1,"message":"75","line":77,"column":12,"nodeType":"73","messageId":"74","endLine":77,"endColumn":20},{"ruleId":"76","severity":1,"message":"77","line":135,"column":21,"nodeType":"78","endLine":145,"endColumn":22},{"ruleId":"71","severity":1,"message":"72","line":17,"column":5,"nodeType":"73","messageId":"74","endLine":17,"endColumn":12},{"ruleId":"71","severity":1,"message":"75","line":79,"column":12,"nodeType":"73","messageId":"74","endLine":79,"endColumn":20},{"ruleId":"76","severity":1,"message":"77","line":147,"column":21,"nodeType":"78","endLine":157,"endColumn":22},{"ruleId":"67","replacedBy":"79"},{"ruleId":"69","replacedBy":"80"},{"ruleId":"71","severity":1,"message":"72","line":15,"column":5,"nodeType":"73","messageId":"74","endLine":15,"endColumn":12},{"ruleId":"76","severity":1,"message":"77","line":134,"column":21,"nodeType":"78","endLine":142,"endColumn":22},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"no-unused-vars","'Spotify' is assigned a value but never used.","Identifier","unusedVar","'hasError' is assigned a value but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement",["81"],["82"],"no-global-assign","no-unsafe-negation"]