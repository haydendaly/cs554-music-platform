[{"/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/index.js":"1","/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/pages/PostInsert.jsx":"2","/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/pages/Home.jsx":"3","/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/NavBar.jsx":"4","/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/SignOut.js":"5","/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/playListbyLoveSongs.js":"6","/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/Sidebar.jsx":"7","/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/playAlbum.js":"8","/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/SocialSignIn.js":"9","/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/Logo.jsx":"10","/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/app/index.js":"11","/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/Navigation.js":"12","/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/SignIn.js":"13","/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/SidebarRight.jsx":"14","/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/SignUp.js":"15","/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/index.js":"16","/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/firebase/Firebase.js":"17","/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/pages/index.js":"18"},{"size":174,"mtime":1606721953159,"results":"19","hashOfConfig":"20"},{"size":12271,"mtime":1606716469702,"results":"21","hashOfConfig":"20"},{"size":187,"mtime":1606721313106,"results":"22","hashOfConfig":"20"},{"size":620,"mtime":1606442762601,"results":"23","hashOfConfig":"20"},{"size":271,"mtime":1606442762602,"results":"24","hashOfConfig":"20"},{"size":5197,"mtime":1606721667965,"results":"25","hashOfConfig":"20"},{"size":692,"mtime":1606722298443,"results":"26","hashOfConfig":"20"},{"size":4858,"mtime":1606721666962,"results":"27","hashOfConfig":"20"},{"size":624,"mtime":1606442762603,"results":"28","hashOfConfig":"20"},{"size":436,"mtime":1606442762594,"results":"29","hashOfConfig":"20"},{"size":1123,"mtime":1606718607551,"results":"30","hashOfConfig":"20"},{"size":1050,"mtime":1606721668656,"results":"31","hashOfConfig":"20"},{"size":1853,"mtime":1606442762602,"results":"32","hashOfConfig":"20"},{"size":1758,"mtime":1606722369134,"results":"33","hashOfConfig":"20"},{"size":2315,"mtime":1606442762602,"results":"34","hashOfConfig":"20"},{"size":376,"mtime":1606717681491,"results":"35","hashOfConfig":"20"},{"size":554,"mtime":1606442762603,"results":"36","hashOfConfig":"20"},{"size":90,"mtime":1606442762606,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"211xq7",{"filePath":"40","messages":"41","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/index.js",[],"/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/pages/PostInsert.jsx",["80","81","82","83","84","85","86","87","88","89","90"],"import React, { useContext } from 'react'\nimport { useState, useEffect } from \"react\";\nimport axios from 'axios'\nimport { makeStyles, Card, CardContent,Typography, Button} from '@material-ui/core';\nimport Modal from 'react-bootstrap/Modal'\nimport { AuthContext } from \"../firebase/Auth\";\n\nconst useStyles = makeStyles({\n    \n    Button:{\n\t\tmarginleft:'.5%',\n        marginRight:'.5%',\n        \n    },\n    card: {\n        marginTop:'5%',\n\t\tmaxWidth: '50%',\n\t\theight: '100px',\n\t\tmarginLeft: 'auto',\n\t\tmarginRight: 'auto',\n\t\tborderRadius: 5,\n\t\tborder: '1px solid #1e8678',\n\t\tboxShadow: '0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);'\n    },\n    classLike: {\n        marginButtom: '0em',\n        height:'2em',\n        with: '1em',\n        marginLeft: '470px',\n        marginRight:'1%'\n    },\n    toprightCornerParent:{\n        display :\"flex\"\n    },\n\n    toprightCornerButton:{\n        // display :\"flex\",\n        marginleft : \"auto\",\n        // top: \"2px\",\n        // right: \"2px\",\n        // zindex: \"100\"\n    },\n    textFieldStyle: {\n        left: \".5%\",\n        right:\".5%\",\n        top: \".5%\",\n        bottom: \"25%\",\n        width : \"90%\",\n        margin: \"auto\",\n        background: \"white\",\n    }\n})\nfunction PostInsert() {\n    const classes = useStyles();\n    const { currentUser } = useContext(AuthContext);\n\n    const [post, setPost] = useState(null);\n    const [loading, setLoading] = useState(true);\n\n    const [comment, setCommentData] = useState(undefined);\n    const [songData, setSongData] = useState({});\n    const [postData, setPostData] = useState(null);\n    const [editPostData, seteditPostData] = useState(false);\n    const [postId, setPostId] = useState(null);\n\n    const [showAddModal, setShowAddModal] = useState(false);\n    const handleClose = () => setShowAddModal(false);\n    const handleShow = () => setShowAddModal(true);\n\n    /***\n     * Render all Post\n     */\n    useEffect(() => {\n        getAllPost() \n    },[showAddModal])\n    \n    const getAllPost = async () => {\n        try {\n            const { data } = await axios.get(\"http://localhost:3000/api/post\");\n            setPost(data); \n            setLoading(false);\n        } catch (e) {\n            console.log(`error found : ${e}`);\n        }\n    }\n\n    /***\n     * Handle comment hide/show\n     */\n    const isCommentExpand = (commentTap) => {       \n    }\n\n    /***\n     * Retrieve comment data from textfield\n     */\n    const handleCommentTextField = (e) => {\n        setCommentData(e.target.value)\n    }\n\n    /***\n     * save comment on given post \n     * render complete data\n     */\n    const saveComment = async (commentPost) => {\n        if(currentUser &&  currentUser.uid){\n            try {\n                const { commentData } = await axios.post(`http://localhost:3000/api/post/${commentPost._id}/comment`, {\n                userId : currentUser.uid,\n                commentText : comment\n                }); \n                getAllPost()\n                let field = document.getElementById(\"commentField\" + commentPost._id)\n                field.value = \"\"\n            } catch (error) {\n                throw `${error}`\n            }\n        }else{\n            let field = document.getElementById(\"commentField\" + commentPost._id)\n            field.value = \"\"\n            alert(\"Please LogIn to Comment on Post\")\n        }\n    }\n\n    /***\n     * Check if post liked by login user.\n     * \n     * if yes, then again tap on like button will unlike it and remove from liked list.\n     * \n     * If no, then post is liked, and added to liked list.\n     */\n    const handleLike = async (likedpost) => {\n        if(currentUser &&  currentUser.uid){\n        try {\n            let data = isLikedByUser(likedpost)\n\n            if(!data){\n                const { likeData } = await axios.post(`http://localhost:3000/api/post/${likedpost._id}/likes`, {\n                userId : currentUser.uid,\n             });\n\n            }else{\n                const { likeData } = await axios.delete(`http://localhost:3000/api/post/${likedpost._id}/likes/${data._id}`);\n            }           \n             getAllPost()\n            \n        } catch (e) {\n            console.log(`ERROR IN MAIN : ${e}`);\n        }\n    } else{\n        alert(\"Please LogIn to like Post\")\n    }\n    }\n\n    const isLikedByUser = (likePost) => {\n        if(currentUser && currentUser.uid){ \n        let likeArray = likePost[\"likesArray\"]\n\n        if(likeArray.length > 0){\n          let data = likeArray.filter(function(item){\n                       return currentUser.uid === item[\"userId\"];\n                   });\n           if(data) return data[0]\n        }\n        return null\n     }\n       \n    }\n        \n    /***\n     * Get Post data from post textfield\n     */\n    const handleTextField = async(e) => {\n        setPostData(e.target.value)\n    }\n\n    /***\n     * If user logged in , then allow to add, edit or delete post\n     * Else show message \"You must log in to post\"\n     * Once posted , save post\n     */\n    const handleAddPost = async () => {\n        if(currentUser &&  currentUser.uid){\n            try {\n                const { data } = await axios.post(\"http://localhost:3000/api/post\", {\n                   userId : currentUser.uid, // pass valid userid here\n                   text : postData,\n                   songData: songData,\n                   commentsArray :[],\n                   likesArray : []\n                });\n                handleClose()\n               \n             } catch (e) {\n                console.log(`ERROR IN ADD POST : ${e}`);\n             } \n        }else{\n            alert(\"You must logged in to Post on SpotifyTwitter\")\n        }     \n    };\n\n    /**\n     * Edit given post ,\n     * only if logged In uploaded that post,\n     */\n    const editPost = async (argPost) => {\n        if(currentUser && currentUser.uid && currentUser.uid === argPost.userId){\n            seteditPostData(true)  //set edit mode true\n            setPostId(argPost._id) //set postId\n            setPostData(argPost.text) // set pre text into textfield\n            setShowAddModal(true) // show modal in edit mode         \n        }else{\n            alert(\"Invalid user to edit post\")\n        }\n\n    }\n    const handleEditPost = async () => {\n        try {\n            const { data } = await axios.patch(`http://localhost:3000/api/post/${postId}`, {\n                text : postData,\n            });\n            seteditPostData(false) // set edit mode off\n            handleClose() // close modal\n            setPostId(null) // set post Id to null after edit\n                   \n        } catch (e) {\n            console.log(`ERROR IN EDIT POST : ${e}`);\n        }   \n    }\n        \n\n    /**\n     * Delete given post ,\n     * only if logged In uploaded that post,\n     */\n    const deletePost = async (argPost) => {\n        if(currentUser && currentUser.uid && currentUser.uid === argPost.userId){\n            try {\n                const { data } = await axios.delete(`http://localhost:3000/api/post/${argPost._id}`)\n                getAllPost()\n            } catch (error) {\n                console.log(`ERROR IN DELETE POST : ${error}`);\n            }\n            \n        }\n    }\n\n    /**\n     * Delete given comment ,\n     * only if logged In commented ,\n     */\n    const deleteComment = async (argPost, argComment) => {\n        if(currentUser && currentUser.uid && currentUser.uid === argComment.userId){\n            try {\n                const { data } = await axios.delete(`http://localhost:3000/api/post/${argPost._id}/comment/${argComment._id}`)\n                getAllPost()\n            } catch (error) {\n                console.log(`ERROR IN DELETE COMMENT : ${error}`);\n            }           \n        }else{\n            console.log(`currentUSer=${currentUser.uid}, commentUser=${argComment.userId}, postId= http://localhost:3000/api/post/${argPost._id}/comment/${argComment._id}`)\n        }\n    }\n\n    const showAddPostModal = () => {\n        if(currentUser){\n            handleShow()\n        }else{\n            alert(\"Please logIn to add post\")\n        }\n    }\n\n    const hideEditMode = (currentData) => {\n        if(currentUser && currentUser.uid && currentUser.uid === currentData.userId){\n            return false\n        }\n        return true\n    }\n\n    return (\n        <div className=\"main\">\n            <div>\n            {/* add post */}\n            <button onClick={() => showAddPostModal()}>Add Post</button>\n            </div>\n\n            <Modal show={showAddModal} onHide={handleClose}>\n            <Modal.Header closeButton>\n            <Modal.Title>{editPostData ? \"EditPost\" : \"Add Post\"}</Modal.Title>        \n            </Modal.Header>  \n            <Modal.Body> \n            <textarea  className={classes.textFieldStyle} id=\"txtPost\" value={editPostData ? postData : null} type='text' placeholder=\"Enter Post here....\" rows=\"4\" onChange={handleTextField}/>\n            </Modal.Body>\n            <Modal.Footer>\n            <Button variant=\"contained\" color='secondary' size='medium' type=\"reset\" defaultValue=\"Reset\"  onClick={() => {editPostData? handleEditPost() : handleAddPost()}}>Enter</Button>\n            <Button onClick={handleClose}> Cancel </Button> \n            </Modal.Footer>\n            </Modal>\n\n            {/* display post */}\n            <ul> {(post && post.length > 0) ? (post.map(product =>\n             \n                <li key={product._id} className=\"list__item product\">\n                <div>\n                    <Card className={classes.card} variant='outlined'>\n                    <CardContent>\n                        <Typography  gutterBottom variant='h6' component='h2'>\n                            {product.text}\n                            <div class={classes.toprightCornerParent} hidden={hideEditMode(product)}> \n                            <Button id={\"edit\" + product._id} className={classes.toprightCornerButton} variant=\"contained\" color=\"primary\" size='medium' onClick={() => editPost(product)}>Edit</Button>\n                            <Button id={\"delete\" + product._id} className={classes.toprightCornerButton} variant=\"contained\" color=\"primary\" size='medium' onClick={() => deletePost(product)}>Delete</Button>\n                            </div>                          \n                        </Typography>\n\n                    </CardContent> \n                    </Card>\n    \n                    <Button id={\"like\" + product._id} className={classes.classLike} variant=\"contained\" color={isLikedByUser(product) ? \"primary\" : \"inherit\" } size='medium' onClick={() => handleLike(product)}>{product.likesArray ? product.likesArray.length : 0 } Like</Button>\n                    <Button id={\"comment\" + product._id} variant=\"contained\" color='secondary' size='medium'  onClick={() => isCommentExpand(product)}>{product.commentsArray ? product.commentsArray.length : 0} Comment</Button>\n                       \n                        <ul>\n                          {(product[\"commentsArray\"] && product[\"commentsArray\"].length > 0) ? (product[\"commentsArray\"].map(commentItem =>\n                            \n                            <li className={classes.classLike} key={commentItem._id} className=\"list__item product\">\n                                {commentItem[\"commentText\"]}\n                                <div hidden={hideEditMode(commentItem)}> \n                                <Button id={\"delete\" + commentItem._id} variant=\"contained\" color=\"primary\" size='medium' onClick={() => deleteComment(product, commentItem)}>Delete</Button>\n                                </div>\n                            </li>\n                          \n                         )) : (<p>No Comment</p>)}\n                        </ul>\n                       \n                       <textarea className={classes.textFieldStyle} id={\"commentField\" + product._id} type='text' placeholder=\"Enter Comment here....\" rows=\"2\" onChange={handleCommentTextField}/>\n                       <Button  variant=\"contained\" color='secondary' size='medium' type=\"reset\" defaultValue=\"Reset\"  onClick={() => saveComment(product)}>Enter</Button>         \n                 </div>\n              </li>\n                \n        )) : (<p>No Post</p>)}\n        </ul>\n\n            \n        </div>\n    );\n}\n\nexport default PostInsert",["91","92"],"/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/pages/Home.jsx",[],["93","94"],"/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/NavBar.jsx",[],["95","96"],"/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/SignOut.js",[],"/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/playListbyLoveSongs.js",["97","98","99","100","101","102","103"],"/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/Sidebar.jsx",[],"/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/playAlbum.js",["104","105","106"],"/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/SocialSignIn.js",[],["107","108"],"/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/Logo.jsx",[],["109","110"],"/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/app/index.js",[],"/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/Navigation.js",[],"/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/SignIn.js",[],"/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/SidebarRight.jsx",[],"/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/SignUp.js",[],"/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/index.js",[],"/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/firebase/Firebase.js",[],"/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/pages/index.js",[],{"ruleId":"111","severity":1,"message":"112","line":58,"column":12,"nodeType":"113","messageId":"114","endLine":58,"endColumn":19},{"ruleId":"111","severity":1,"message":"115","line":61,"column":22,"nodeType":"113","messageId":"114","endLine":61,"endColumn":33},{"ruleId":"111","severity":1,"message":"116","line":107,"column":25,"nodeType":"113","messageId":"114","endLine":107,"endColumn":36},{"ruleId":"117","severity":1,"message":"118","line":115,"column":17,"nodeType":"119","messageId":"120","endLine":115,"endColumn":33},{"ruleId":"111","severity":1,"message":"121","line":137,"column":25,"nodeType":"113","messageId":"114","endLine":137,"endColumn":33},{"ruleId":"111","severity":1,"message":"121","line":142,"column":25,"nodeType":"113","messageId":"114","endLine":142,"endColumn":33},{"ruleId":"111","severity":1,"message":"122","line":184,"column":25,"nodeType":"113","messageId":"114","endLine":184,"endColumn":29},{"ruleId":"111","severity":1,"message":"122","line":218,"column":21,"nodeType":"113","messageId":"114","endLine":218,"endColumn":25},{"ruleId":"111","severity":1,"message":"122","line":238,"column":25,"nodeType":"113","messageId":"114","endLine":238,"endColumn":29},{"ruleId":"111","severity":1,"message":"122","line":254,"column":25,"nodeType":"113","messageId":"114","endLine":254,"endColumn":29},{"ruleId":"123","severity":1,"message":"124","line":323,"column":85,"nodeType":"125","endLine":323,"endColumn":115},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"126","replacedBy":"130"},{"ruleId":"128","replacedBy":"131"},{"ruleId":"126","replacedBy":"132"},{"ruleId":"128","replacedBy":"133"},{"ruleId":"111","severity":1,"message":"134","line":5,"column":10,"nodeType":"113","messageId":"114","endLine":5,"endColumn":21},{"ruleId":"111","severity":1,"message":"135","line":7,"column":5,"nodeType":"113","messageId":"114","endLine":7,"endColumn":12},{"ruleId":"111","severity":1,"message":"136","line":69,"column":12,"nodeType":"113","messageId":"114","endLine":69,"endColumn":20},{"ruleId":"111","severity":1,"message":"137","line":74,"column":9,"nodeType":"113","messageId":"114","endLine":74,"endColumn":21},{"ruleId":"111","severity":1,"message":"138","line":75,"column":11,"nodeType":"113","messageId":"114","endLine":75,"endColumn":22},{"ruleId":"111","severity":1,"message":"139","line":76,"column":8,"nodeType":"113","messageId":"114","endLine":76,"endColumn":18},{"ruleId":"140","severity":1,"message":"141","line":127,"column":7,"nodeType":"142","endLine":128,"endColumn":73},{"ruleId":"111","severity":1,"message":"134","line":5,"column":10,"nodeType":"113","messageId":"114","endLine":5,"endColumn":21},{"ruleId":"111","severity":1,"message":"135","line":7,"column":5,"nodeType":"113","messageId":"114","endLine":7,"endColumn":12},{"ruleId":"140","severity":1,"message":"141","line":122,"column":8,"nodeType":"142","endLine":123,"endColumn":74},{"ruleId":"126","replacedBy":"143"},{"ruleId":"128","replacedBy":"144"},{"ruleId":"126","replacedBy":"145"},{"ruleId":"128","replacedBy":"146"},"no-unused-vars","'loading' is assigned a value but never used.","Identifier","unusedVar","'setSongData' is assigned a value but never used.","'commentData' is assigned a value but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'likeData' is assigned a value but never used.","'data' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-native-reassign",["147"],"no-negated-in-lhs",["148"],["147"],["148"],["147"],["148"],"'AuthContext' is defined but never used.","'Spotify' is assigned a value but never used.","'hasError' is assigned a value but never used.","'showAddModal' is assigned a value but never used.","'handleClose' is assigned a value but never used.","'handleShow' is assigned a value but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement",["147"],["148"],["147"],["148"],"no-global-assign","no-unsafe-negation"]