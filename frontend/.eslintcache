[{"C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\index.js":"1","C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\components\\ChangePassword.js":"2","C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\components\\NavBar.jsx":"3","C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\components\\SidebarRight.jsx":"4","C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\pages\\PostInsert.jsx":"5","C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\components\\SignUp.js":"6","C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\app\\index.js":"7","C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\pages\\Home.jsx":"8","C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\pages\\UserProfile.jsx":"9","C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\firebase\\Firebase.js":"10","C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\components\\SocialSignIn.js":"11","C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\components\\playAlbum.js":"12","C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\components\\playListbyLoveSongs.js":"13","C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\components\\Sidebar.jsx":"14","C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\components\\SearchPlayList.js":"15","C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\firebase\\Auth.js":"16","C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\components\\SignIn.js":"17","C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\components\\Modals\\ShowErrorModal.js":"18","C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\pages\\AddPostModal.jsx":"19","C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\firebase\\FirebaseFunctions.js":"20"},{"size":177,"mtime":1607459116986,"results":"21","hashOfConfig":"22"},{"size":3587,"mtime":1607459116974,"results":"23","hashOfConfig":"22"},{"size":637,"mtime":1607459116975,"results":"24","hashOfConfig":"22"},{"size":3506,"mtime":1607459116977,"results":"25","hashOfConfig":"22"},{"size":21361,"mtime":1607459116989,"results":"26","hashOfConfig":"22"},{"size":3694,"mtime":1607459116979,"results":"27","hashOfConfig":"22"},{"size":3034,"mtime":1607464546684,"results":"28","hashOfConfig":"22"},{"size":191,"mtime":1607459116988,"results":"29","hashOfConfig":"22"},{"size":9038,"mtime":1607459116990,"results":"30","hashOfConfig":"22"},{"size":578,"mtime":1607459116983,"results":"31","hashOfConfig":"22"},{"size":813,"mtime":1607459116980,"results":"32","hashOfConfig":"22"},{"size":7076,"mtime":1607488450787,"results":"33","hashOfConfig":"22"},{"size":6403,"mtime":1607465687007,"results":"34","hashOfConfig":"22"},{"size":3082,"mtime":1607464569387,"results":"35","hashOfConfig":"22"},{"size":7123,"mtime":1607488468915,"results":"36","hashOfConfig":"22"},{"size":697,"mtime":1607459116983,"results":"37","hashOfConfig":"22"},{"size":2808,"mtime":1607459116978,"results":"38","hashOfConfig":"22"},{"size":2325,"mtime":1607481535505,"results":"39","hashOfConfig":"22"},{"size":7256,"mtime":1607488731579,"results":"40","hashOfConfig":"22"},{"size":3585,"mtime":1607459116984,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1ta8lqd",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"55"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\index.js",[],["87","88"],"C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\components\\ChangePassword.js",[],["89","90"],"C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\components\\NavBar.jsx",[],"C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\components\\SidebarRight.jsx",[],"C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\pages\\PostInsert.jsx",["91","92","93","94","95","96","97","98","99"],"import React, { useContext } from 'react'\r\nimport { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport {\r\n    makeStyles,\r\n    Card,\r\n    CardContent,\r\n    Typography,\r\n    Button,\r\n} from '@material-ui/core'\r\nimport { AuthContext } from '../firebase/Auth'\r\nimport AddPostModal from '../pages/AddPostModal'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    Button: {\r\n        marginleft: '.5%',\r\n        marginRight: '.5%',\r\n    },\r\n    card: {\r\n        marginTop: '5%',\r\n        maxWidth: '50%',\r\n        height: '100px',\r\n        marginLeft: 'auto',\r\n        marginRight: 'auto',\r\n        borderRadius: 5,\r\n        border: '1px solid #1e8678',\r\n        boxShadow:\r\n            '0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);',\r\n    },\r\n    classLike: {\r\n        marginButtom: '0em',\r\n        height: '2em',\r\n        with: '1em',\r\n        marginLeft: '470px',\r\n        marginRight: '1%',\r\n    },\r\n    toprightCornerParent: {\r\n        display: 'flex',\r\n    },\r\n\r\n    toprightCornerButton: {\r\n        // display :\"flex\",\r\n        marginleft: 'auto',\r\n        // top: \"2px\",\r\n        // right: \"2px\",\r\n        // zindex: \"100\"\r\n    },\r\n    textFieldStyle: {\r\n        left: '.5%',\r\n        right: '.5%',\r\n        top: '.5%',\r\n        bottom: '25%',\r\n        width: '90%',\r\n        margin: 'auto',\r\n        background: 'white',\r\n    },\r\n    root: {\r\n        display: 'flex',\r\n        maxWidth: '100%',\r\n    },\r\n    details: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        width: '50%',\r\n    },\r\n    content: {\r\n        flex: '1 0 auto',\r\n    },\r\n    cover: {\r\n        width: '50%',\r\n    },\r\n    controls: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        paddingLeft: theme.spacing(1),\r\n        paddingBottom: theme.spacing(1),\r\n    },\r\n    playIcon: {\r\n        height: 38,\r\n        width: 38,\r\n    },\r\n}))\r\nfunction PostInsert() {\r\n    const classes = useStyles()\r\n    const { currentUser } = useContext(AuthContext)\r\n\r\n    const [post, setPost] = useState(null)\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    const [comment, setCommentData] = useState(undefined)\r\n    const [postData, setPostData] = useState(null)\r\n    const [editPostData, seteditPostData] = useState(false)\r\n    const [postId, setPostId] = useState(null)\r\n\r\n    const [showAddModal, setShowAddModal] = useState(false)\r\n    const handleClose = () => setShowAddModal(false)\r\n    const handleShow = () => setShowAddModal(true)\r\n\r\n    /***\r\n     * Render all Post\r\n     */\r\n    useEffect(() => {\r\n        getAllPost()\r\n    }, [showAddModal])\r\n\r\n    const getAllPost = async () => {\r\n        try {\r\n            const { data } = await axios.get('http://localhost:3000/api/post')\r\n            setPost(data)\r\n            setLoading(false)\r\n        } catch (e) {\r\n            console.log(`error found : ${e}`)\r\n        }\r\n    }\r\n\r\n    /***\r\n     * Handle comment hide/show\r\n     */\r\n    const isCommentExpand = (commentTap) => {}\r\n\r\n    /***\r\n     * Retrieve comment data from textfield\r\n     */\r\n    const handleCommentTextField = (e) => {\r\n        setCommentData(e.target.value)\r\n    }\r\n\r\n    /***\r\n     * save comment on given post\r\n     * render complete data\r\n     */\r\n    const saveComment = async (commentPost) => {\r\n        if (currentUser && currentUser.uid) {\r\n            try {\r\n                const { commentData } = await axios.post(\r\n                    `http://localhost:3000/api/post/${commentPost._id}/comment`,\r\n                    {\r\n                        userId: currentUser.uid,\r\n                        commentText: comment,\r\n                    }\r\n                )\r\n                getAllPost()\r\n                let field = document.getElementById(\r\n                    'commentField' + commentPost._id\r\n                )\r\n                field.value = ''\r\n            } catch (error) {\r\n                throw `${error}`\r\n            }\r\n        } else {\r\n            let field = document.getElementById(\r\n                'commentField' + commentPost._id\r\n            )\r\n            field.value = ''\r\n            alert('Please LogIn to Comment on Post')\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete given comment ,\r\n     * only if logged In commented ,\r\n     */\r\n    const deleteComment = async (argPost, argComment) => {\r\n        if (\r\n            currentUser &&\r\n            currentUser.uid &&\r\n            currentUser.uid === argComment.userId\r\n        ) {\r\n            try {\r\n                const { data } = await axios.delete(\r\n                    `http://localhost:3000/api/post/${argPost._id}/comment/${argComment._id}`\r\n                )\r\n                getAllPost()\r\n            } catch (error) {\r\n                console.log(`ERROR IN DELETE COMMENT : ${error}`)\r\n            }\r\n        } else {\r\n            console.log(\r\n                `currentUSer=${currentUser.uid}, commentUser=${argComment.userId}, postId= http://localhost:3000/api/post/${argPost._id}/comment/${argComment._id}`\r\n            )\r\n        }\r\n    }\r\n\r\n    /***\r\n     * Check if post liked by login user.\r\n     *\r\n     * if yes, then again tap on like button will unlike it and remove from liked list.\r\n     *\r\n     * If no, then post is liked, and added to liked list.\r\n     */\r\n    const handleLike = async (likedpost) => {\r\n        if (currentUser && currentUser.uid) {\r\n            try {\r\n                let data = isLikedByUser(likedpost)\r\n\r\n                if (!data) {\r\n                    const { likeData } = await axios.post(\r\n                        `http://localhost:3000/api/post/${likedpost._id}/likes`,\r\n                        {\r\n                            userId: currentUser.uid,\r\n                        }\r\n                    )\r\n                } else {\r\n                    const { likeData } = await axios.delete(\r\n                        `http://localhost:3000/api/post/${likedpost._id}/likes/${data._id}`\r\n                    )\r\n                }\r\n                getAllPost()\r\n            } catch (e) {\r\n                console.log(`ERROR IN MAIN : ${e}`)\r\n            }\r\n        } else {\r\n            alert('Please LogIn to like Post')\r\n        }\r\n    }\r\n\r\n    const isLikedByUser = (likePost) => {\r\n        if (currentUser && currentUser.uid) {\r\n            let likeArray = likePost['likesArray']\r\n\r\n            if (likeArray.length > 0) {\r\n                let data = likeArray.filter(function (item) {\r\n                    return currentUser.uid === item['userId']\r\n                })\r\n                if (data) return data[0]\r\n            }\r\n            return null\r\n        }\r\n    }\r\n    /**\r\n     * Edit given post ,\r\n     * only if logged In uploaded that post,\r\n     */\r\n    const editPost = async (argPost) => {\r\n        if (\r\n            currentUser &&\r\n            currentUser.uid &&\r\n            currentUser.uid === argPost.userId\r\n        ) {\r\n            seteditPostData(true) //set edit mode true\r\n            setPostId(argPost._id) //set postId\r\n            setPostData(argPost.text) // set pre text into textfield\r\n            setShowAddModal(true) // show modal in edit mode\r\n        } else {\r\n            alert('Invalid user to edit post')\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete given post ,\r\n     * only if logged In uploaded that post,\r\n     */\r\n    const deletePost = async (argPost) => {\r\n        if (\r\n            currentUser &&\r\n            currentUser.uid &&\r\n            currentUser.uid === argPost.userId\r\n        ) {\r\n            try {\r\n                const { data } = await axios.delete(\r\n                    `http://localhost:3000/api/post/${argPost._id}`\r\n                )\r\n                getAllPost()\r\n            } catch (error) {\r\n                console.log(`ERROR IN DELETE POST : ${error}`)\r\n            }\r\n        }\r\n    }\r\n\r\n    const showAddPostModal = () => {\r\n        if (currentUser) {\r\n            handleShow()\r\n        } else {\r\n            alert('Please logIn to add post')\r\n        }\r\n    }\r\n\r\n    const closeAddPostModal = () => {\r\n        handleClose()\r\n        getAllPost()\r\n        if (editPostData) {\r\n            setPostData(null)\r\n            setPostId(null)\r\n            seteditPostData(false)\r\n        }\r\n    }\r\n\r\n    const hideEditMode = (currentData) => {\r\n        if (\r\n            currentUser &&\r\n            currentUser.uid &&\r\n            currentUser.uid === currentData.userId\r\n        ) {\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    return (\r\n        <div className=\"main\">\r\n            <br />\r\n            <div>\r\n                {/* show add/edit post popup */}\r\n                <center>\r\n                    {' '}\r\n                    <button onClick={() => showAddPostModal()}>Add Post</button>\r\n                </center>\r\n            </div>\r\n            <br />\r\n            {showAddModal && (\r\n                <AddPostModal\r\n                    isOpen={showAddModal}\r\n                    handleClose={closeAddPostModal}\r\n                    title={editPostData ? 'EditPost' : 'Add Post'}\r\n                    data={editPostData ? postData : null}\r\n                    currentUser={currentUser.uid}\r\n                    songData={null}\r\n                    postId={editPostData ? postId : null}\r\n                />\r\n            )}\r\n\r\n            {/* display post */}\r\n            <ul>\r\n                {' '}\r\n                {post && post.length > 0 ? (\r\n                    post.map((product) => (\r\n                        <li key={product._id} className=\"list__item product\">\r\n                            <div>\r\n                                {product.songData ? (\r\n                                    <Card className={classes.root}>\r\n                                        <div className={classes.details}>\r\n                                            <CardContent\r\n                                                className={classes.content}\r\n                                            >\r\n                                                <Typography\r\n                                                    component=\"h5\"\r\n                                                    variant=\"h5\"\r\n                                                >\r\n                                                    {product.songData.name}\r\n                                                </Typography>\r\n                                                <Typography\r\n                                                    variant=\"subtitle1\"\r\n                                                    color=\"textSecondary\"\r\n                                                >\r\n                                                    {product.songData.id}\r\n                                                </Typography>\r\n                                                <Typography\r\n                                                    variant=\"subtitle1\"\r\n                                                    color=\"textSecondary\"\r\n                                                >\r\n                                                    <a\r\n                                                        href={\r\n                                                            product.songData\r\n                                                                .href\r\n                                                        }\r\n                                                    >\r\n                                                        {product.songData.href}\r\n                                                    </a>\r\n                                                </Typography>\r\n                                                <iframe\r\n                                                    id=\"playSong\"\r\n                                                    src={\r\n                                                        'https://open.spotify.com/embed?uri=' +\r\n                                                        product.songData.uri\r\n                                                    }\r\n                                                    width=\"300\"\r\n                                                    height=\"380\"\r\n                                                    frameborder=\"0\"\r\n                                                    allowtransparency=\"true\"\r\n                                                ></iframe>\r\n                                            </CardContent>\r\n                                        </div>\r\n                                    </Card>\r\n                                ) : (\r\n                                    ''\r\n                                )}\r\n\r\n                                <Card className={classes.root}>\r\n                                    <CardContent>\r\n                                        <Typography\r\n                                            gutterBottom\r\n                                            variant=\"h6\"\r\n                                            component=\"h2\"\r\n                                        >\r\n                                            {product.text}\r\n                                        </Typography>\r\n                                        <Typography\r\n                                            gutterBottom\r\n                                            variant=\"h6\"\r\n                                            component=\"h2\"\r\n                                        >\r\n                                            <div\r\n                                                class={\r\n                                                    classes.toprightCornerParent\r\n                                                }\r\n                                                hidden={hideEditMode(product)}\r\n                                            >\r\n                                                <Button\r\n                                                    id={'edit' + product._id}\r\n                                                    className={\r\n                                                        classes.toprightCornerButton\r\n                                                    }\r\n                                                    variant=\"contained\"\r\n                                                    color=\"primary\"\r\n                                                    size=\"medium\"\r\n                                                    onClick={() =>\r\n                                                        editPost(product)\r\n                                                    }\r\n                                                >\r\n                                                    Edit\r\n                                                </Button>\r\n                                                <Button\r\n                                                    id={'delete' + product._id}\r\n                                                    className={\r\n                                                        classes.toprightCornerButton\r\n                                                    }\r\n                                                    variant=\"contained\"\r\n                                                    color=\"primary\"\r\n                                                    size=\"medium\"\r\n                                                    onClick={() =>\r\n                                                        deletePost(product)\r\n                                                    }\r\n                                                >\r\n                                                    Delete\r\n                                                </Button>\r\n                                            </div>\r\n                                        </Typography>\r\n                                    </CardContent>\r\n                                </Card>\r\n\r\n                                <Button\r\n                                    id={'like' + product._id}\r\n                                    className={classes.classLike}\r\n                                    variant=\"contained\"\r\n                                    color={\r\n                                        isLikedByUser(product)\r\n                                            ? 'primary'\r\n                                            : 'inherit'\r\n                                    }\r\n                                    size=\"medium\"\r\n                                    onClick={() => handleLike(product)}\r\n                                >\r\n                                    {product.likesArray\r\n                                        ? product.likesArray.length\r\n                                        : 0}{' '}\r\n                                    Like\r\n                                </Button>\r\n                                <Button\r\n                                    id={'comment' + product._id}\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    size=\"medium\"\r\n                                    onClick={() => isCommentExpand(product)}\r\n                                >\r\n                                    {product.commentsArray\r\n                                        ? product.commentsArray.length\r\n                                        : 0}{' '}\r\n                                    Comment\r\n                                </Button>\r\n\r\n                                <ul>\r\n                                    {product['commentsArray'] &&\r\n                                    product['commentsArray'].length > 0 ? (\r\n                                        product['commentsArray'].map(\r\n                                            (commentItem) => (\r\n                                                <li\r\n                                                    className={\r\n                                                        classes.classLike\r\n                                                    }\r\n                                                    key={commentItem._id}\r\n                                                    className=\"list__item product\"\r\n                                                >\r\n                                                    {commentItem['commentText']}\r\n                                                    <div\r\n                                                        hidden={hideEditMode(\r\n                                                            commentItem\r\n                                                        )}\r\n                                                    >\r\n                                                        <Button\r\n                                                            id={\r\n                                                                'delete' +\r\n                                                                commentItem._id\r\n                                                            }\r\n                                                            variant=\"contained\"\r\n                                                            color=\"primary\"\r\n                                                            size=\"medium\"\r\n                                                            onClick={() =>\r\n                                                                deleteComment(\r\n                                                                    product,\r\n                                                                    commentItem\r\n                                                                )\r\n                                                            }\r\n                                                        >\r\n                                                            Delete\r\n                                                        </Button>\r\n                                                    </div>\r\n                                                </li>\r\n                                            )\r\n                                        )\r\n                                    ) : (\r\n                                        <p>No Comment</p>\r\n                                    )}\r\n                                </ul>\r\n\r\n                                <textarea\r\n                                    className={classes.textFieldStyle}\r\n                                    id={'commentField' + product._id}\r\n                                    type=\"text\"\r\n                                    placeholder=\"Enter Comment here....\"\r\n                                    rows=\"2\"\r\n                                    onChange={handleCommentTextField}\r\n                                />\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    size=\"medium\"\r\n                                    type=\"reset\"\r\n                                    defaultValue=\"Reset\"\r\n                                    onClick={() => saveComment(product)}\r\n                                >\r\n                                    Enter\r\n                                </Button>\r\n                                <br />\r\n                                <br />\r\n                            </div>\r\n                        </li>\r\n                    ))\r\n                ) : (\r\n                    <p>No Post</p>\r\n                )}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostInsert\r\n",["100","101"],"C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\components\\SignUp.js",[],"C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\app\\index.js",[],"C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\pages\\Home.jsx",[],"C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\pages\\UserProfile.jsx",[],"C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\firebase\\Firebase.js",[],"C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\components\\SocialSignIn.js",[],"C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\components\\playAlbum.js",["102","103"],"C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\components\\playListbyLoveSongs.js",["104","105","106"],"import React, { useContext, useState, useEffect } from 'react'\r\nimport {\r\n    Card,\r\n    CardActionArea,\r\n    CardContent,\r\n    Grid,\r\n    Typography,\r\n    makeStyles,\r\n    Button,\r\n} from '@material-ui/core'\r\nimport SpotifyWebApi from 'spotify-web-api-js'\r\nimport { AuthContext } from '../firebase/Auth'\r\nimport AddPostModal from '../pages/AddPostModal'\r\n\r\nlet Spotify = require('spotify-web-api-js')\r\n// var s = new Spotify();\r\n\r\nlet spotifyApi = new SpotifyWebApi()\r\n\r\nspotifyApi.setAccessToken(\r\n    'BQD07fk89nMF8-Err92jW_UIG0cAJf9j8mk804H9BIw0bBESjUBXPyIc-Yy2OHx8QcPdB3ElTpVlBF_k7jo04ucdeYZLzghJySLyaKja6mzb8il-R8mBjPsWKIf5QtXN-b4yrIqG5_AD9QTMeoXUxTtzbS_BYVtJYv1fA9bpN2HVLYI0'\r\n)\r\n\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        maxWidth: 350,\r\n        height: 'auto',\r\n        marginLeft: 'auto',\r\n        marginRight: 'auto',\r\n        borderRadius: 5,\r\n        border: '1px solid #1e8678',\r\n        boxShadow:\r\n            '0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);',\r\n    },\r\n    titleHead: {\r\n        borderBottom: '1px solid #1e8678',\r\n        fontWeight: 'bold',\r\n        Color: 'black !important',\r\n    },\r\n    grid: {\r\n        flexGrow: 1,\r\n        flexDirection: 'row',\r\n    },\r\n\r\n    modal: {\r\n        top: '50%',\r\n        left: '20%',\r\n        right: 'auto',\r\n        // bottom: '90%',\r\n        marginRight: '50%',\r\n        transform: 'translate(10%, -50%)',\r\n        width: '50%',\r\n        // border: '1px solid #28547a',\r\n        borderRadius: '4px',\r\n        float: 'left',\r\n        // background:'lightblue'\r\n    },\r\n\r\n    textFieldStyle: {\r\n        left: '.5%',\r\n        right: '.5%',\r\n        top: '.5%',\r\n        bottom: '25%',\r\n        width: '90%',\r\n        margin: 'auto',\r\n        background: 'white',\r\n    },\r\n\r\n    buttonClass: {\r\n        marginLeft: '40%',\r\n    },\r\n})\r\n\r\nconst PlayListByLoveSongs = (props) => {\r\n    const [playListData, setPlayListData] = useState(undefined)\r\n    const classes = useStyles()\r\n    const [hasError, setHasError] = useState(false)\r\n    const [loading, setLoading] = useState(true)\r\n    const [sharePost, setSharePost] = useState(null)\r\n    const [showSharePostModal, setShowSharePostModal] = useState(null)\r\n\r\n    const { currentUser } = useContext(AuthContext)\r\n\r\n    let card = null\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            try {\r\n                spotifyApi.searchTracks('Love',{country:'us'}).then(\r\n                    function (data) {\r\n                        setPlayListData(data.tracks.items)\r\n                        setLoading(false)\r\n                    },\r\n                    function (err) {\r\n                        setHasError(err)\r\n                    }\r\n                )\r\n            } catch (e) {\r\n                setHasError(e.message)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const handleOpenshareModal = (trackDetails) => {\r\n        setShowSharePostModal(true)\r\n        setSharePost(trackDetails)\r\n        console.log(trackDetails)\r\n    }\r\n\r\n    const handleCloseModals = () => {\r\n        setShowSharePostModal(false)\r\n    }\r\n\r\n    const buildCard = (playList) => {\r\n        return (\r\n            <Grid item xs={12} sm={6} md={4} lg={4} xl={2} key={playList.id}>\r\n                <Card className={classes.card} variant=\"outlined\">\r\n                    <CardActionArea>\r\n                        <a href={playList.external_urls.spotify}>\r\n                            Go to Spotify\r\n                        </a>\r\n                        <CardContent>\r\n                            <Typography\r\n                                className={classes.titleHead}\r\n                                gutterBottom\r\n                                variant=\"h6\"\r\n                                component=\"h3\"\r\n                            >\r\n                                <span>{playList.name}</span>\r\n                                <br />\r\n                                <span>Popularity: {playList.popularity}</span>\r\n                            </Typography>\r\n                        </CardContent>\r\n                    </CardActionArea>\r\n                    <iframe\r\n                        id=\"playSong\"\r\n                        src={\r\n                            'https://open.spotify.com/embed?uri=' + playList.uri\r\n                        }\r\n                        width=\"300\"\r\n                        height=\"380\"\r\n                        frameborder=\"0\"\r\n                        allowtransparency=\"true\"\r\n                        allow=\"encrypted-media\"\r\n                    ></iframe>\r\n                    <div className=\"e-card-actions e-card-vertical\">\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            className={classes.buttonClass}\r\n                            onClick={() => {\r\n                                handleOpenshareModal(playList)\r\n                            }}\r\n                        >\r\n                            share\r\n                        </Button>\r\n                    </div>\r\n                    {showSharePostModal && (\r\n                        <AddPostModal\r\n                            isOpen={showSharePostModal}\r\n                            handleClose={handleCloseModals}\r\n                            title={'Share Post'}\r\n                            data={null}\r\n                            currentUser={currentUser.uid}\r\n                            songData={sharePost}\r\n                            postId={null}\r\n                        />\r\n                    )}\r\n                </Card>\r\n            </Grid>\r\n        )\r\n    }\r\n    if (playListData) {\r\n        console.log(playListData)\r\n        card =\r\n            playListData &&\r\n            playListData\r\n                .filter((x) =>\r\n                    x.available_markets.some((y) => y.includes('US'))\r\n                )\r\n                .map((playList) => {\r\n                    return buildCard(playList)\r\n                })\r\n    }\r\n\r\n    if (loading) {\r\n        return (\r\n            <div>\r\n                <h2>Loading....</h2>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div class=\"main\">\r\n                <Grid container className={classes.grid} spacing={5}>\r\n                    {card}\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PlayListByLoveSongs\r\n","C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\components\\Sidebar.jsx",[],"C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\components\\SearchPlayList.js",["107","108","109"],"C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\firebase\\Auth.js",[],"C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\components\\SignIn.js",[],"C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\components\\Modals\\ShowErrorModal.js",["110","111","112"],"C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\pages\\AddPostModal.jsx",["113","114"],"C:\\Users\\visit\\CS554\\CS-554-Project\\cs554-music-platform\\frontend\\src\\firebase\\FirebaseFunctions.js",[],{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"115","replacedBy":"119"},{"ruleId":"117","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":88,"column":12,"nodeType":"123","messageId":"124","endLine":88,"endColumn":19},{"ruleId":"121","severity":1,"message":"125","line":135,"column":25,"nodeType":"123","messageId":"124","endLine":135,"endColumn":36},{"ruleId":"126","severity":1,"message":"127","line":148,"column":17,"nodeType":"128","messageId":"129","endLine":148,"endColumn":33},{"ruleId":"121","severity":1,"message":"130","line":170,"column":25,"nodeType":"123","messageId":"124","endLine":170,"endColumn":29},{"ruleId":"121","severity":1,"message":"131","line":197,"column":29,"nodeType":"123","messageId":"124","endLine":197,"endColumn":37},{"ruleId":"121","severity":1,"message":"131","line":204,"column":29,"nodeType":"123","messageId":"124","endLine":204,"endColumn":37},{"ruleId":"121","severity":1,"message":"130","line":260,"column":25,"nodeType":"123","messageId":"124","endLine":260,"endColumn":29},{"ruleId":"132","severity":1,"message":"133","line":360,"column":49,"nodeType":"134","endLine":370,"endColumn":50},{"ruleId":"135","severity":1,"message":"136","line":471,"column":53,"nodeType":"137","endLine":471,"endColumn":83},{"ruleId":"115","replacedBy":"138"},{"ruleId":"117","replacedBy":"139"},{"ruleId":"121","severity":1,"message":"140","line":15,"column":5,"nodeType":"123","messageId":"124","endLine":15,"endColumn":12},{"ruleId":"132","severity":1,"message":"133","line":134,"column":21,"nodeType":"134","endLine":142,"endColumn":22},{"ruleId":"121","severity":1,"message":"140","line":15,"column":5,"nodeType":"123","messageId":"124","endLine":15,"endColumn":12},{"ruleId":"121","severity":1,"message":"141","line":77,"column":12,"nodeType":"123","messageId":"124","endLine":77,"endColumn":20},{"ruleId":"132","severity":1,"message":"133","line":135,"column":21,"nodeType":"134","endLine":145,"endColumn":22},{"ruleId":"121","severity":1,"message":"140","line":17,"column":5,"nodeType":"123","messageId":"124","endLine":17,"endColumn":12},{"ruleId":"121","severity":1,"message":"141","line":79,"column":12,"nodeType":"123","messageId":"124","endLine":79,"endColumn":20},{"ruleId":"132","severity":1,"message":"133","line":147,"column":21,"nodeType":"134","endLine":157,"endColumn":22},{"ruleId":"121","severity":1,"message":"142","line":7,"column":5,"nodeType":"123","messageId":"124","endLine":7,"endColumn":15},{"ruleId":"121","severity":1,"message":"143","line":9,"column":5,"nodeType":"123","messageId":"124","endLine":9,"endColumn":15},{"ruleId":"121","severity":1,"message":"144","line":10,"column":5,"nodeType":"123","messageId":"124","endLine":10,"endColumn":11},{"ruleId":"121","severity":1,"message":"130","line":97,"column":25,"nodeType":"123","messageId":"124","endLine":97,"endColumn":29},{"ruleId":"121","severity":1,"message":"130","line":118,"column":21,"nodeType":"123","messageId":"124","endLine":118,"endColumn":25},"no-native-reassign",["145"],"no-negated-in-lhs",["146"],["145"],["146"],"no-unused-vars","'loading' is assigned a value but never used.","Identifier","unusedVar","'commentData' is assigned a value but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'data' is assigned a value but never used.","'likeData' is assigned a value but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["145"],["146"],"'Spotify' is assigned a value but never used.","'hasError' is assigned a value but never used.","'CardHeader' is defined but never used.","'Typography' is defined but never used.","'Avatar' is defined but never used.","no-global-assign","no-unsafe-negation"]