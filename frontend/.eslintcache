[{"/Users/mahvishsyed/Desktop/Github/cs554-music-platform/frontend/src/app/index.js":"1","/Users/mahvishsyed/Desktop/Github/cs554-music-platform/frontend/src/components/playListbyLoveSongs.js":"2","/Users/mahvishsyed/Desktop/Github/cs554-music-platform/frontend/src/components/Sidebar.jsx":"3","/Users/mahvishsyed/Desktop/Github/cs554-music-platform/frontend/src/components/SignUp.js":"4","/Users/mahvishsyed/Desktop/Github/cs554-music-platform/frontend/src/components/ChangePassword.js":"5","/Users/mahvishsyed/Desktop/Github/cs554-music-platform/frontend/src/components/SocialSignIn.js":"6","/Users/mahvishsyed/Desktop/Github/cs554-music-platform/frontend/src/components/PlayArtist.js":"7","/Users/mahvishsyed/Desktop/Github/cs554-music-platform/frontend/src/index.js":"8","/Users/mahvishsyed/Desktop/Github/cs554-music-platform/frontend/src/firebase/Auth.js":"9","/Users/mahvishsyed/Desktop/Github/cs554-music-platform/frontend/src/components/PlayTracks.js":"10","/Users/mahvishsyed/Desktop/Github/cs554-music-platform/frontend/src/components/SidebarRight.jsx":"11","/Users/mahvishsyed/Desktop/Github/cs554-music-platform/frontend/src/components/PlayPlayList.js":"12","/Users/mahvishsyed/Desktop/Github/cs554-music-platform/frontend/src/components/PlayAlbum.js":"13","/Users/mahvishsyed/Desktop/Github/cs554-music-platform/frontend/src/components/SearchComponent.js":"14","/Users/mahvishsyed/Desktop/Github/cs554-music-platform/frontend/src/components/Modals/AddPostModal.jsx":"15","/Users/mahvishsyed/Desktop/Github/cs554-music-platform/frontend/src/components/PlayMusic.js":"16","/Users/mahvishsyed/Desktop/Github/cs554-music-platform/frontend/src/components/SignIn.js":"17","/Users/mahvishsyed/Desktop/Github/cs554-music-platform/frontend/src/pages/Home.jsx":"18"},{"size":3983,"mtime":1608080048559,"results":"19","hashOfConfig":"20"},{"size":6067,"mtime":1608071380164,"results":"21","hashOfConfig":"20"},{"size":4260,"mtime":1608089220647,"results":"22","hashOfConfig":"20"},{"size":4968,"mtime":1607982813640,"results":"23","hashOfConfig":"20"},{"size":3834,"mtime":1607982813639,"results":"24","hashOfConfig":"20"},{"size":1366,"mtime":1607879862551,"results":"25","hashOfConfig":"20"},{"size":6696,"mtime":1608076886528,"results":"26","hashOfConfig":"20"},{"size":171,"mtime":1607791892164,"results":"27","hashOfConfig":"20"},{"size":704,"mtime":1608071380164,"results":"28","hashOfConfig":"20"},{"size":6660,"mtime":1608077141304,"results":"29","hashOfConfig":"20"},{"size":8420,"mtime":1608074583691,"results":"30","hashOfConfig":"20"},{"size":6702,"mtime":1608076902698,"results":"31","hashOfConfig":"20"},{"size":6461,"mtime":1608077934057,"results":"32","hashOfConfig":"20"},{"size":808,"mtime":1607791892143,"results":"33","hashOfConfig":"20"},{"size":7069,"mtime":1608140839832,"results":"34","hashOfConfig":"20"},{"size":8226,"mtime":1608141635008,"results":"35","hashOfConfig":"20"},{"size":3290,"mtime":1607982813640,"results":"36","hashOfConfig":"20"},{"size":2036,"mtime":1608071380165,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"hswteu",{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"63"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/mahvishsyed/Desktop/Github/cs554-music-platform/frontend/src/app/index.js",["84"],"/Users/mahvishsyed/Desktop/Github/cs554-music-platform/frontend/src/components/playListbyLoveSongs.js",["85","86"],"import React, { useContext, useState, useEffect } from 'react'\nimport {\n    Card,\n    CardActionArea,\n    CardContent,\n    Grid,\n    Typography,\n    makeStyles,\n    Button,\n} from '@material-ui/core'\nimport SpotifyWebApi from 'spotify-web-api-js'\n\nimport { AuthContext } from '../firebase/Auth'\nimport Loading from './Loading'\nimport AddPostModal from './Modals/AddPostModal'\n\nlet spotifyApi = new SpotifyWebApi()\n\nspotifyApi.setAccessToken(\n    'BQBzVb1VQn20pxWFtP63bRzK3Zjl9APTx7Ncn8qZ6x34ULjGsefsTYmLoqPTLWY1Q_NFpwccm1C_XFb2K4NoJlqDZkruMf9nD4db-EQCNwaIL_3W_uAUmZQdMbi8D0Gjyc1Qh26wDD_0nrTccDq_ba7IXaMjQ124feTF7y_Pee4kkxppIjShXxrzU_BakWoiQs99wsZ6wBfIrd2PQDcMlNAozGc'\n)\n\nconst useStyles = makeStyles({\n    card: {\n        maxWidth: 350,\n        height: 'auto',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        borderRadius: 5,\n        border: '1px solid #1e8678',\n        boxShadow:\n            '0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);',\n    },\n    titleHead: {\n        borderBottom: '1px solid #1e8678',\n        fontWeight: 'bold',\n        Color: 'black !important',\n    },\n    grid: {\n        flexGrow: 1,\n        flexDirection: 'row',\n    },\n\n    modal: {\n        top: '50%',\n        left: '20%',\n        right: 'auto',\n        // bottom: '90%',\n        marginRight: '50%',\n        transform: 'translate(10%, -50%)',\n        width: '50%',\n        // border: '1px solid #28547a',\n        borderRadius: '4px',\n        float: 'left',\n        // background:'lightblue'\n    },\n\n    textFieldStyle: {\n        left: '.5%',\n        right: '.5%',\n        top: '.5%',\n        bottom: '25%',\n        width: '90%',\n        margin: 'auto',\n        background: 'white',\n    },\n\n    buttonClass: {\n        marginLeft: '40%',\n    },\n})\n\nconst PlayListByLoveSongs = (props) => {\n    const [playListData, setPlayListData] = useState(undefined)\n    const classes = useStyles()\n    const [hasError, setHasError] = useState(false)\n    const [loading, setLoading] = useState(true)\n    const [sharePost, setSharePost] = useState(null)\n    const [showSharePostModal, setShowSharePostModal] = useState(null)\n\n    const { currentUser } = useContext(AuthContext)\n\n    let card = null\n    useEffect(() => {\n        async function fetchData() {\n            try {\n                spotifyApi.searchTracks('Love', { country: 'us' }).then(\n                    function (data) {\n                        setPlayListData(data.tracks.items)\n                        setLoading(false)\n                    },\n                    function (err) {\n                        setHasError(err)\n                    }\n                )\n            } catch (e) {\n                setHasError(e.message)\n            }\n        }\n        fetchData()\n    }, [])\n\n    const handleOpenshareModal = (trackDetails) => {\n        setShowSharePostModal(true)\n        setSharePost(trackDetails)\n    }\n\n    const handleCloseModals = () => {\n        setShowSharePostModal(false)\n    }\n\n    const buildCard = (playList) => {\n        return (\n            <Grid item xs={12} sm={6} md={4} lg={4} xl={2} key={playList.id}>\n                <Card className={classes.card} variant=\"outlined\">\n                    <CardActionArea>\n                        <a href={playList.external_urls.spotify}>\n                            Go to Spotify\n                        </a>\n                        <CardContent>\n                            <Typography\n                                className={classes.titleHead}\n                                gutterBottom\n                                variant=\"h6\"\n                                component=\"h3\"\n                            >\n                                <span>{playList.name}</span>\n                                <br />\n                                <span>Popularity: {playList.popularity}</span>\n                            </Typography>\n                        </CardContent>\n                    </CardActionArea>\n                    <iframe\n                        id=\"playSong\"\n                        src={\n                            'https://open.spotify.com/embed?uri=' + playList.uri\n                        }\n                        width=\"300\"\n                        height=\"380\"\n                        frameBorder=\"0\"\n                        allowtransparency=\"true\"\n                        allow=\"encrypted-media\"\n                    ></iframe>\n                    <div className=\"e-card-actions e-card-vertical\">\n                        <Button\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            className={classes.buttonClass}\n                            onClick={() => {\n                                handleOpenshareModal(playList)\n                            }}\n                        >\n                            share\n                        </Button>\n                    </div>\n                    {showSharePostModal && (\n                        <AddPostModal\n                            isOpen={showSharePostModal}\n                            handleClose={handleCloseModals}\n                            title={'Share Post'}\n                            data={null}\n                            currentUser={currentUser.uid}\n                            songData={sharePost}\n                            postId={null}\n                        />\n                    )}\n                </Card>\n            </Grid>\n        )\n    }\n    if (playListData) {\n        card =\n            playListData &&\n            playListData\n                .filter((x) =>\n                    x.available_markets.some((y) => y.includes('US'))\n                )\n                .map((playList) => {\n                    return buildCard(playList)\n                })\n    }\n\n    if (loading) {\n        return <Loading />\n    } else {\n        return (\n            <div class=\"main\">\n                <Grid container className={classes.grid} spacing={5}>\n                    {card}\n                </Grid>\n            </div>\n        )\n    }\n}\n\nexport default PlayListByLoveSongs\n",["87","88"],"/Users/mahvishsyed/Desktop/Github/cs554-music-platform/frontend/src/components/Sidebar.jsx",["89","90"],"/Users/mahvishsyed/Desktop/Github/cs554-music-platform/frontend/src/components/SignUp.js",[],"/Users/mahvishsyed/Desktop/Github/cs554-music-platform/frontend/src/components/ChangePassword.js",[],"/Users/mahvishsyed/Desktop/Github/cs554-music-platform/frontend/src/components/SocialSignIn.js",[],["91","92"],"/Users/mahvishsyed/Desktop/Github/cs554-music-platform/frontend/src/components/PlayArtist.js",["93","94","95","96","97","98","99","100"],"import React, { useContext, useState, useEffect } from 'react'\nimport {\n    Card,\n    CardActionArea,\n    CardContent,\n    Grid,\n    Typography,\n    makeStyles,\n    Button,\n    Link,\n    CardMedia,\n} from '@material-ui/core'\n\nimport { AuthContext } from '../firebase/Auth'\nimport Loading from './Loading'\nimport AddPostModal from './Modals/AddPostModal'\nimport ShowErrorModal from './Modals/ShowErrorModal'\nimport axios from 'axios'\nimport { SpotifyContext } from '../functions/Spotify'\n\nconst useStyles = makeStyles({\n    sidebarCard: {\n        maxWidth: '100%',\n        height: '100%',\n        marginTop: '12px',\n    },\n    card: {\n        marginTop: \"10%\",\n        maxWidth: 350,\n        height: 'auto',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        borderRadius: 5,\n        border: '1px solid #1e8678',\n        boxShadow:\n            '0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);',\n    },\n    titleHead: {\n        borderBottom: '1px solid #1e8678',\n        fontWeight: 'bold',\n        Color: 'black !important',\n    },\n    grid: {\n        flexGrow: 1,\n        flexDirection: 'row',\n    },\n    modal: {\n        top: '50%',\n        left: '20%',\n        right: 'auto',\n        // bottom: '90%',\n        marginRight: '50%',\n        transform: 'translate(10%, -50%)',\n        width: '50%',\n        // border: '1px solid #28547a',\n        borderRadius: '4px',\n        float: 'left',\n        // background:'lightblue'\n    },\n\n    textFieldStyle: {\n        left: '.5%',\n        right: '.5%',\n        top: '.5%',\n        bottom: '25%',\n        width: '90%',\n        margin: 'auto',\n        background: 'white',\n    },\n\n    buttonClass: {\n        justifyContent: 'center',\n        marginBottom : '5%',\n        marginTop: '5%'\n    },\n})\n\nconst PlayByArtist = (props) => {\n    const { accessToken } = useContext(SpotifyContext)\n    const [artistData, setArtistDataa] = useState(undefined)\n    const classes = useStyles()\n    const [hasError, setHasError] = useState(false)\n    const [loading, setLoading] = useState(true)\n    const [sharePost, setSharePost] = useState(null)\n    const [showSharePostModal, setShowSharePostModal] = useState(null)\n    const [albumId, setAlbumId] = useState(props.match.params.id)\n    const [errorModal, setErrorModal] = useState(false)\n\n    let card = null\n    const baseUrl = 'http://localhost:3000/spotify-api/artists/'\n\n    const { currentUser } = useContext(AuthContext)\n\n    const [state, setState] = useState({ data: null })\n\n    useEffect(() => {\n        console.log('on load useeffect')\n        async function fetchData() {\n            try {\n                console.log(albumId)\n                const { data } = await axios.get(\n                    baseUrl +\n                        props.match.params.id +\n                        '?access_token=' +\n                        accessToken\n                )\n                setArtistDataa(data)\n                console.log(data)\n                setLoading(false)\n            } catch (e) {\n                console.log(e)\n            }\n        }\n        fetchData()\n    }, [props.match.params.id])\n\n    const handleOpenshareModal = (trackDetails) => {\n        setShowSharePostModal(true)\n        setSharePost(trackDetails)\n        setErrorModal(true)\n    }\n\n    const handleCloseModals = () => {\n        setShowSharePostModal(false)\n        setErrorModal(false)\n    }\n\n    const buildCard = (album) => {\n        return (\n            <center>\n            <Grid item xs={12} sm={6} md={4} lg={4} xl={4} key={album.id}>\n                <Card className={classes.card} variant=\"outlined\">\n                    <CardActionArea>\n                        <CardContent>\n                            <Typography\n                                className={classes.titleHead}\n                                gutterBottom\n                                variant=\"h6\"\n                                component=\"h3\"\n                            >\n                                <span>{album.name}</span>\n                                <br />\n                                <span>Track Number: {album.track_number}</span>\n                            </Typography>\n                        </CardContent>\n                    </CardActionArea>\n                    <iframe\n                        id=\"playSong\"\n                        src={'https://open.spotify.com/embed?uri=' + album.uri}\n                        width=\"300\"\n                        height=\"380\"\n                        frameBorder=\"0\"\n                        allowtransparency=\"true\"\n                        allow=\"encrypted-media\"\n                    ></iframe>\n                    <div className=\"e-card-actions e-card-vertical\">\n                        <Button\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            className={classes.buttonClass}\n                            onClick={() => {\n                                handleOpenshareModal(album)\n                            }}\n                        >\n                            share\n                        </Button>\n                        {currentUser\n                            ? showSharePostModal && (\n                                  <AddPostModal\n                                      isOpen={showSharePostModal}\n                                      handleClose={handleCloseModals}\n                                      title={'Share Post'}\n                                      data={null}\n                                      currentUser={currentUser.uid}\n                                      songData={sharePost}\n                                      postId={null}\n                                  />\n                              )\n                            : errorModal && (\n                                  <ShowErrorModal\n                                      isOpen={errorModal}\n                                      handleClose={handleCloseModals}\n                                      title={'Login Error'}\n                                  />\n                              )}\n                    </div>\n                </Card>\n            </Grid>\n            </center>\n        )\n    }\n    if (artistData) {\n        console.log(artistData)\n        card = artistData && artistData\n        return buildCard(artistData)\n    }\n\n    if (loading) {\n        return <Loading />\n    }\n    if (hasError) {\n        return <div>{hasError}</div>\n    } else {\n        return (\n            <div class=\"main\">\n                <Grid container className={classes.grid} spacing={5}>\n                    {card}\n                </Grid>\n            </div>\n        )\n    }\n}\n\nexport default PlayByArtist\n","/Users/mahvishsyed/Desktop/Github/cs554-music-platform/frontend/src/index.js",[],"/Users/mahvishsyed/Desktop/Github/cs554-music-platform/frontend/src/firebase/Auth.js",[],"/Users/mahvishsyed/Desktop/Github/cs554-music-platform/frontend/src/components/PlayTracks.js",["101","102","103","104","105","106"],"import React, { useContext, useState, useEffect } from 'react'\nimport {\n    Card,\n    CardActionArea,\n    CardContent,\n    Grid,\n    Typography,\n    makeStyles,\n    Button,\n} from '@material-ui/core'\n\nimport { AuthContext } from '../firebase/Auth'\nimport Loading from './Loading'\nimport AddPostModal from './Modals/AddPostModal'\nimport ShowErrorModal from './Modals/ShowErrorModal'\nimport axios from 'axios'\nimport { SpotifyContext } from '../functions/Spotify'\n\nconst useStyles = makeStyles({\n    sidebarCard: {\n        maxWidth: '100%',\n        height: '100%',\n        marginTop: '12px',\n    },\n    card: {\n        marginTop: \"10%\",\n        maxWidth: 350,\n        height: 'auto',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        borderRadius: 5,\n        border: '1px solid #1e8678',\n        boxShadow:\n            '0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);',\n    },\n    titleHead: {\n        borderBottom: '1px solid #1e8678',\n        fontWeight: 'bold',\n        Color: 'black !important',\n    },\n    grid: {\n        flexGrow: 1,\n        flexDirection: 'row',\n    },\n    modal: {\n        top: '50%',\n        left: '20%',\n        right: 'auto',\n        // bottom: '90%',\n        marginRight: '50%',\n        transform: 'translate(10%, -50%)',\n        width: '50%',\n        // border: '1px solid #28547a',\n        borderRadius: '4px',\n        float: 'left',\n        // background:'lightblue'\n    },\n\n    textFieldStyle: {\n        left: '.5%',\n        right: '.5%',\n        top: '.5%',\n        bottom: '25%',\n        width: '90%',\n        margin: 'auto',\n        background: 'white',\n    },\n\n    buttonClass: {\n        justifyContent: 'center',\n        marginBottom : '5%',\n        marginTop: '5%'\n    },\n})\n\nconst PlayByTracks = (props) => {\n    const { accessToken } = useContext(SpotifyContext)\n    const [trackData, setTrackData] = useState(undefined)\n    const classes = useStyles()\n    const [hasError, setHasError] = useState(false)\n    const [loading, setLoading] = useState(true)\n    const [sharePost, setSharePost] = useState(null)\n    const [showSharePostModal, setShowSharePostModal] = useState(null)\n    const [albumId, setAlbumId] = useState(props.match.params.id)\n    const [errorModal, setErrorModal] = useState(false)\n\n    let card = null\n    const baseUrl = 'http://localhost:3000/spotify-api/tracks/'\n\n    const { currentUser } = useContext(AuthContext)\n\n    const [state, setState] = useState({ data: null })\n\n    useEffect(() => {\n        console.log('on load useeffect')\n        async function fetchData() {\n            try {\n                console.log(albumId)\n                const { data } = await axios.get(\n                    baseUrl +\n                        props.match.params.id +\n                        '?access_token=' +\n                        accessToken\n                )\n                setTrackData(data)\n                console.log(data)\n                setLoading(false)\n            } catch (e) {\n                console.log(e)\n            }\n        }\n        fetchData()\n    }, [props.match.params.id])\n\n    const handleOpenshareModal = (trackDetails) => {\n        setShowSharePostModal(true)\n        setSharePost(trackDetails)\n        setErrorModal(true)\n    }\n\n    const handleCloseModals = () => {\n        setShowSharePostModal(false)\n        setErrorModal(false)\n    }\n\n    const buildCard = (album) => {\n        return (\n            <center>\n            <Grid item xs={12} sm={6} md={4} lg={4} xl={4} key={album.id}>\n                <Card className={classes.card} variant=\"outlined\">\n                    <CardActionArea>\n                        <CardContent>\n                            <Typography\n                                className={classes.titleHead}\n                                gutterBottom\n                                variant=\"h6\"\n                                component=\"h3\"\n                            >\n                                <span>{album.name}</span>\n                                <br />\n                                <span>Track Number: {album.track_number}</span>\n                            </Typography>\n                        </CardContent>\n                    </CardActionArea>\n                    <iframe\n                        id=\"playSong\"\n                        src={'https://open.spotify.com/embed?uri=' + album.uri}\n                        width=\"300\"\n                        height=\"380\"\n                        frameBorder=\"0\"\n                        allowtransparency=\"true\"\n                        allow=\"encrypted-media\"\n                    ></iframe>\n                    <div className=\"e-card-actions e-card-vertical\">\n                        <Button\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            className={classes.buttonClass}\n                            onClick={() => {\n                                handleOpenshareModal(album)\n                            }}\n                        >\n                            share\n                        </Button>\n                        {currentUser\n                            ? showSharePostModal && (\n                                  <AddPostModal\n                                      isOpen={showSharePostModal}\n                                      handleClose={handleCloseModals}\n                                      title={'Share Post'}\n                                      data={null}\n                                      currentUser={currentUser.uid}\n                                      songData={sharePost}\n                                      postId={null}\n                                  />\n                              )\n                            : errorModal && (\n                                  <ShowErrorModal\n                                      isOpen={errorModal}\n                                      handleClose={handleCloseModals}\n                                      title={'Login Error'}\n                                  />\n                              )}\n                    </div>\n                </Card>\n            </Grid>\n            </center>\n        )\n    }\n    if (trackData) {\n        console.log(trackData)\n        card = trackData && trackData\n        return buildCard(trackData)\n    }\n\n    if (loading) {\n        return <Loading />\n    }\n    if (hasError) {\n        return <div>{hasError}</div>\n    } else {\n        return (\n            <div class=\"main\">\n                <Grid container className={classes.grid} spacing={5}>\n                    {card}\n                </Grid>\n            </div>\n        )\n    }\n}\n\nexport default PlayByTracks\n",["107","108"],"/Users/mahvishsyed/Desktop/Github/cs554-music-platform/frontend/src/components/SidebarRight.jsx",["109","110","111","112"],"import React, { useState, useEffect, useContext } from 'react'\nimport { FontAwesomeIcon as Icon } from '@fortawesome/react-fontawesome'\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\nimport axios from 'axios'\nimport { useWindowDimensions } from '../functions/dimensions'\nimport { Link } from 'react-router-dom'\nimport { SpotifyContext } from '../functions/Spotify'\n\nconst types = ['album', 'artist', 'playlist', 'track']\n\nconst useSidebarRight = () => {\n    const { accessToken } = useContext(SpotifyContext)\n\n    const [search, setSearch] = useState('')\n    const [results, setResults] = useState([])\n    const [recommended, setRecommended] = useState([])\n    const [open, setOpen] = useState(false)\n    const { width } = useWindowDimensions()\n    const [hasError, setHasError] = useState(null)\n    const [searchType, setSearchType] = useState(null)\n\n    // const url = 'http://localhost:3000/spotify-api/search?q=king%10gizzard&type=album&market=US'\n    const baseUrl = `http://${window.location.hostname}:3000/spotify-api/search?q=`\n    useEffect(() => {\n        let url =\n            `http://${window.location.hostname}:3000/spotify-api/me/top` +\n            '?type=tracks&access_token=' +\n            accessToken\n        axios\n            .get(url)\n            .then(({ data }) => {\n                if (data) {\n                    setRecommended(data.items)\n                }\n            })\n            .catch((err) => {\n                console.log(err)\n            })\n    }, [])\n\n    useEffect(() => {\n        const url =\n            baseUrl +\n            search\n                .toLowerCase()\n                .split(' ')\n                .filter((word) => !types.includes(word))\n                .join(' ') +\n            '&type=track,album,playlist,artist&market=US&access_token=' +\n            accessToken\n        if (search === '') {\n            setResults([])\n            setSearchType('all')\n        } else {\n            axios\n                .get(url)\n                .then(({ data }) => {\n                    console.log(data)\n                    if (search.toLowerCase().includes('album')) {\n                        setResults(data.albums.items)\n                        setSearchType('album')\n                    } else if (search.toLowerCase().includes('artist')) {\n                        setResults(data.artists.items)\n                        setSearchType('artist')\n                    } else if (search.toLowerCase().includes('playlist')) {\n                        setResults(data.playlists.items)\n                        setSearchType('playlist')\n                    } else if (search.toLowerCase().includes('track')) {\n                        setResults(data.tracks.items)\n                        setSearchType('track')\n                    } else {\n                        let res = data.albums.items || []\n                        res = res.concat(data.artists.items || [])\n                        res = res.concat(data.playlists.items || [])\n                        res = res.concat(data.tracks.items || [])\n                        setResults(res)\n                        setSearchType('all')\n                    }\n                })\n                .catch((err) => {\n                    console.log(err)\n                    setHasError(err)\n                })\n        }\n    }, [search])\n\n    useEffect(() => {\n        if (width >= 1400) {\n            setOpen(false)\n        }\n    }, [width])\n\n    return {\n        search,\n        setSearch,\n        results,\n        recommended,\n        open,\n        setOpen,\n        width,\n        searchType,\n    }\n}\n\nconst Holder = ({ link, name, images, artists }) => (\n    <Link to={link} className=\"sidebar-song\">\n        <div className=\"sidebar-song-icon shadow\">\n            <img\n                alt={`${name}`}\n                src={\n                    images.length > 0\n                        ? images[0].url\n                        : 'https://images-wixmp-ed30a86b8c4ca887773594c2.wixmp.com/i/e7981d38-6ee3-496d-a6c0-8710745bdbfc/db6zlbs-68b8cd4f-bf6b-4d39-b9a7-7475cade812f.png'\n                }\n                style={{ width: '100%' }}\n            />\n        </div>\n        <div className=\"sidebar-song-info\">\n            <p className=\"sidebar-song-title\">\n                {name.length > 23 ? name.slice(0, 23) + '...' : name}\n            </p>\n            <p className=\"sidebar-song-artist\">\n                {artists.length > 23 ? artists.slice(0, 23) + '...' : artists}\n            </p>\n        </div>\n    </Link>\n)\n\nconst Song = (props) => {\n    const { data } = props\n    if (data && data.type === 'album') {\n        return (\n            <Holder\n                link={`/album/${data.id}`}\n                name={data.name}\n                images={data.images}\n                artists={data.artists.map((o) => o.name).join(', ')}\n            />\n        )\n    } else if (data && data.type === 'track') {\n        return (\n            <Holder\n                link={`/track/${data.id}`}\n                name={data.name}\n                images={data.album.images}\n                artists={data.artists.map((o) => o.name).join(', ')}\n            />\n        )\n    } else if (data && data.type === 'playlist') {\n        return (\n            <Holder\n                link={`/playlist/${data.id}`}\n                name={data.name}\n                images={data.images}\n                artists={data.owner.display_name}\n            />\n        )\n    } else if (data && data.type === 'artist') {\n        return (\n            <Holder\n                link={`/artist/${data.id}`}\n                name={data.name}\n                images={data.images}\n                artists={'Artist'}\n            />\n        )\n    } else {\n        return null\n    }\n}\n\nconst SideBarRight = () => {\n    const {\n        search,\n        setSearch,\n        results,\n        recommended,\n        open,\n        setOpen,\n        width,\n        searchType,\n        hasError,\n    } = useSidebarRight()\n\n    return (\n        <div\n            className=\"sidenav-right shadow\"\n            style={width > 1400 || open ? {} : { width: 55 }}\n        >\n            {width > 1400 || open ? (\n                <div>\n                    <div className=\"search\">\n                        <Icon\n                            icon={faSearch}\n                            color=\"#444\"\n                            onClick={() => setOpen(false)}\n                        />\n                        <input\n                            className=\"search-input\"\n                            placeholder=\"Search\"\n                            value={search}\n                            onChange={(e) => setSearch(e.target.value)}\n                        />\n                    </div>\n                    <div>\n                        {search !== '' && results && results.length > 0 ? (\n                            <div className=\"search-results shadow\">\n                                {results.map((song) => (\n                                    <Song\n                                        data={song}\n                                        key={song.id}\n                                        value={searchType}\n                                    />\n                                ))}\n                            </div>\n                        ) : (\n                            <div className=\"search-results shadow\">\n                                <p className=\"recommended-header\">\n                                    Recommended For You:\n                                </p>\n                                {recommended && recommended.length > 0 ? recommended.map((song) => (\n                                    <Song\n                                        data={song}\n                                        key={song.id}\n                                        value=\"tracks\"\n                                    />\n                                )) : <p className=\"recommended-no\"> Please login with Spotify account to get recommedations</p>}\n                            </div>\n                        )}\n                    </div>\n                </div>\n            ) : (\n                <div onClick={() => setOpen(true)}>\n                    <Icon\n                        icon={faSearch}\n                        color=\"#fff\"\n                        style={{ marginLeft: 12 }}\n                    />\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport default SideBarRight\n","/Users/mahvishsyed/Desktop/Github/cs554-music-platform/frontend/src/components/PlayPlayList.js",["113","114","115","116"],"/Users/mahvishsyed/Desktop/Github/cs554-music-platform/frontend/src/components/PlayAlbum.js",["117","118","119","120","121","122"],"import React, { useContext, useState, useEffect } from 'react'\nimport {\n    Card,\n    CardActionArea,\n    CardContent,\n    Grid,\n    Typography,\n    makeStyles,\n    Button,\n} from '@material-ui/core'\n\nimport { AuthContext } from '../firebase/Auth'\nimport Loading from './Loading'\nimport AddPostModal from './Modals/AddPostModal'\nimport ShowErrorModal from './Modals/ShowErrorModal'\nimport axios from 'axios'\nimport { SpotifyContext } from '../functions/Spotify'\n\nconst useStyles = makeStyles({\n    sidebarCard: {\n        maxWidth: '100%',\n        height: '100%',\n        marginTop: '12px',\n    },\n    card: {\n        maxWidth: 350,\n        height: 'auto',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        borderRadius: 5,\n        border: '1px solid #1e8678',\n        boxShadow:\n            '0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);',\n    },\n    titleHead: {\n        borderBottom: '1px solid #1e8678',\n        fontWeight: 'bold',\n        Color: 'black !important',\n    },\n    grid: {\n        flexGrow: 1,\n        flexDirection: 'row',\n    },\n    modal: {\n        top: '50%',\n        left: '20%',\n        right: 'auto',\n        // bottom: '90%',\n        marginRight: '50%',\n        transform: 'translate(10%, -50%)',\n        width: '50%',\n        // border: '1px solid #28547a',\n        borderRadius: '4px',\n        float: 'left',\n        // background:'lightblue'\n    },\n\n    textFieldStyle: {\n        left: '.5%',\n        right: '.5%',\n        top: '.5%',\n        bottom: '25%',\n        width: '90%',\n        margin: 'auto',\n        background: 'white',\n    },\n\n    buttonClass: {\n        marginLeft: '40%',\n    },\n})\n\nconst PlayAlbum = (props) => {\n    const { accessToken } = useContext(SpotifyContext)\n    const [albumData, setAlbumtData] = useState(undefined)\n    const classes = useStyles()\n    const [hasError, setHasError] = useState(false)\n    const [loading, setLoading] = useState(true)\n    const [sharePost, setSharePost] = useState(null)\n    const [showSharePostModal, setShowSharePostModal] = useState(null)\n    const [albumId, setAlbumId] = useState(props.match.params.id)\n    const [errorModal, setErrorModal] = useState(false)\n\n    let card = null\n    const baseUrl = 'http://localhost:3000/spotify-api/albums/'\n\n    const { currentUser } = useContext(AuthContext)\n\n    const [state, setState] = useState({ data: null })\n\n    useEffect(() => {\n        console.log('on load useeffect')\n        async function fetchData() {\n            try {\n                console.log(albumId)\n                const { data } = await axios.get(\n                    baseUrl +\n                        props.match.params.id +\n                        '?access_token=' +\n                        accessToken\n                )\n                setAlbumtData(data.tracks.items)\n                console.log(data.tracks.items)\n                setLoading(false)\n            } catch (e) {\n                console.log(e)\n            }\n        }\n        fetchData()\n    }, [props.match.params.id])\n\n    const handleOpenshareModal = (trackDetails) => {\n        setShowSharePostModal(true)\n        setSharePost(trackDetails)\n        setErrorModal(true)\n    }\n\n    const handleCloseModals = () => {\n        setShowSharePostModal(false)\n        setErrorModal(false)\n    }\n\n    const buildCard = (album) => {\n        return (\n            <Grid item xs={12} sm={6} md={4} lg={4} xl={4} key={album.id}>\n                <Card className={classes.card} variant=\"outlined\">\n                    <CardActionArea>\n                        <CardContent>\n                            <Typography\n                                className={classes.titleHead}\n                                gutterBottom\n                                variant=\"h6\"\n                                component=\"h3\"\n                            >\n                                <span>{album.name}</span>\n                                <br />\n                                <span>Track Number: {album.track_number}</span>\n                            </Typography>\n                        </CardContent>\n                    </CardActionArea>\n                    <iframe\n                        id=\"playSong\"\n                        src={'https://open.spotify.com/embed?uri=' + album.uri}\n                        width=\"300\"\n                        height=\"380\"\n                        frameBorder=\"0\"\n                        allowtransparency=\"true\"\n                        allow=\"encrypted-media\"\n                    ></iframe>\n                    <div className=\"e-card-actions e-card-vertical\">\n                        <Button\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            className={classes.buttonClass}\n                            onClick={() => {\n                                handleOpenshareModal(album)\n                            }}\n                        >\n                            share\n                        </Button>\n                    </div>\n                </Card>\n            </Grid>\n        )\n    }\n    if (albumData) {\n        console.log(albumData)\n        card =\n            albumData &&\n            albumData.map((album) => {\n                return buildCard(album)\n            })\n    }\n\n    if (loading) {\n        return <Loading />\n    }\n    if (hasError) {\n        return <div>{hasError}</div>\n    } else {\n        return (\n            <div class=\"main\">\n                <Grid container className={classes.grid} spacing={5}>\n                    {card}\n                </Grid>\n                {currentUser\n                    ? showSharePostModal && (\n                          <AddPostModal\n                              isOpen={showSharePostModal}\n                              handleClose={handleCloseModals}\n                              title={'Share Post'}\n                              data={null}\n                              currentUser={currentUser.uid}\n                              songData={sharePost}\n                              postId={null}\n                          />\n                      )\n                    : errorModal && (\n                          <ShowErrorModal\n                              isOpen={errorModal}\n                              handleClose={handleCloseModals}\n                              title={'Login Error'}\n                          />\n                      )}\n            </div>\n        )\n    }\n}\n\nexport default PlayAlbum\n","/Users/mahvishsyed/Desktop/Github/cs554-music-platform/frontend/src/components/SearchComponent.js",[],"/Users/mahvishsyed/Desktop/Github/cs554-music-platform/frontend/src/components/Modals/AddPostModal.jsx",["123","124"],"import React, { useState } from 'react'\nimport ReactModal from 'react-modal'\nimport {\n    makeStyles,\n    Button,\n    Card,\n    CardHeader,\n    CardContent,\n    Typography,\n    Avatar,\n} from '@material-ui/core'\nimport axios from 'axios'\n\n//For react-modal\nReactModal.setAppElement('#root')\n\nconst customStyles = {\n    content: {\n        top: '50%',\n        left: '50%',\n        right: 'auto',\n        bottom: 'auto',\n        marginRight: '-50%',\n        transform: 'translate(-50%, -50%)',\n        width: '50%',\n        border: '1px solid #28547a',\n        borderRadius: '4px',\n    },\n}\n\nconst useStyles = makeStyles({\n    Button: {\n        marginleft: '.5%',\n        marginRight: '.5%',\n    },\n    textFieldStyle: {\n        left: '.5%',\n        right: '.5%',\n        top: '.5%',\n        bottom: '25%',\n        width: '90%',\n        margin: 'auto',\n        background: 'white',\n    },\n    labelStyle: {\n        color: 'blue',\n        width: '100%',\n        size: 'bold',\n    },\n    songFieldStyle: {\n        width: '100%',\n        height: '300px',\n    },\n    imageStyle: {\n        width: '50%',\n        height: '50%',\n    },\n    root: {\n        maxWidth: '100%',\n        maxHeight: '50%',\n    },\n    media: {\n        height: '50%',\n        width: '100%',\n        paddingTop: '56.25%', // 16:9\n    },\n    avatar: {\n        backgroundColor: 'red[500]',\n    },\n})\n\nfunction AddPostModal(props) {\n    const [showAddModal, setShowAddModal] = useState(props.isOpen)\n    const classes = useStyles()\n    const [postData, setPostData] = useState(null)\n\n    const handleCloseAddModal = () => {\n        setShowAddModal(true)\n        props.handleClose()\n    }\n\n    /***\n     * Get Post data from post textfield\n     */\n    const handleTextField = async (e) => {\n        setPostData(e.target.value)\n    }\n\n    /***\n     * If user logged in , then allow to add, edit or delete post\n     * Else show message \"You must log in to post\"\n     * Once posted , save post\n     */\n    const handleAddPost = async () => {\n        if (props.currentUser) {\n            try {\n                const { data } = await axios.post(\n                    `http://${window.location.hostname}:3000/api/post`,\n                    {\n                        userId: props.currentUser, // pass valid userid here\n                        text: postData,\n                        songData: props.songData,\n                        commentsArray: [],\n                        likesArray: [],\n                    }\n                )\n                handleCloseAddModal()\n            } catch (e) {\n                console.log(`ERROR IN ADD POST : ${e}`)\n            }\n        } else {\n            alert('You must logged in to Post on SpotifyTwitter')\n        }\n    }\n\n    const handleEditPost = async () => {\n        try {\n            const { data } = await axios.patch(\n                `http://${window.location.hostname}:3000/api/post/${props.postId}`,\n                {\n                    text: postData ? postData : props.data,\n                }\n            )\n            handleCloseAddModal() // close modal\n        } catch (e) {\n            console.log(`ERROR IN EDIT POST : ${e}`)\n        }\n    }\n\n    return (\n        <div>\n            <ReactModal\n                name=\"addModal\"\n                isOpen={showAddModal}\n                contentLabel=\"Add Modal\"\n                style={customStyles}\n            >\n                <label className={classes.labelStyle}>{props.title}</label>\n\n                {props.songData ? (\n                    <Card className={classes.root}>\n                        <CardHeader\n                            avatar={\n                                <Avatar\n                                    aria-label=\"recipe\"\n                                    className={classes.avatar}\n                                >\n                                    S\n                                </Avatar>\n                            }\n                            title={props.songData.name}\n                            subheader={props.songData.id}\n                        />\n                        <iframe\n                            id={props.songData.uri}\n                            title={props.songData.uri}\n                            src={\n                                'https://open.spotify.com/embed?uri=' +\n                                props.songData.uri\n                            }\n                            width=\"300\"\n                            height=\"380\"\n                            frameBorder=\"0\"\n                            allowtransparency=\"true\"\n                            allow=\"encrypted-media\"\n                        ></iframe>\n                        <CardContent>\n                            <Typography\n                                variant=\"body2\"\n                                color=\"textSecondary\"\n                                component=\"p\"\n                            >\n                                <a href={props.songData.href}>\n                                    {props.songData.href}\n                                </a>\n                                <br/>\n                                <br/>\n                                <textarea\n                                    className={classes.textFieldStyle}\n                                    id=\"txtPost\"\n                                    type=\"text\"\n                                    placeholder=\"Enter Post here....\"\n                                    defaultValue={props.data}\n                                    rows=\"2\"\n                                    onChange={handleTextField}\n                                    autoFocus=\"autoFocus\"\n                                />\n                            </Typography>\n                        </CardContent>\n                    </Card>\n                ) : (\n                    <textarea\n                        className={classes.textFieldStyle}\n                        id=\"txtPost\"\n                        type=\"text\"\n                        placeholder=\"Enter Post here....\"\n                        defaultValue={props.data}\n                        rows=\"4\"\n                        onChange={handleTextField}\n                        autoFocus=\"autoFocus\"\n                    />\n                )}\n\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    size=\"medium\"\n                    type=\"reset\"\n                    defaultValue=\"Reset\"\n                    onClick={() => {\n                        props.data ? handleEditPost() : handleAddPost()\n                    }}\n                >\n                    Enter\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    size=\"medium\"\n                    type=\"reset\"\n                    defaultValue=\"Reset\"\n                    onClick={handleCloseAddModal}\n                >\n                    Cancel\n                </Button>\n            </ReactModal>\n        </div>\n    )\n}\n\nexport default AddPostModal\n","/Users/mahvishsyed/Desktop/Github/cs554-music-platform/frontend/src/components/PlayMusic.js",["125","126","127","128"],"import React, { useState, useEffect, useContext } from 'react'\nimport { FontAwesomeIcon as Icon } from '@fortawesome/react-fontawesome'\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\nimport axios from 'axios'\nimport { useWindowDimensions } from '../functions/dimensions'\nimport { Link } from 'react-router-dom'\nimport { SpotifyContext } from '../functions/Spotify'\nimport Nav from 'react-bootstrap/Nav'\nimport { AuthContext } from '../firebase/Auth'\nimport AddPostModal from './Modals/AddPostModal'\nimport ShowErrorModal from './Modals/ShowErrorModal'\n\nimport {\n    Card,\n    CardActionArea,\n    CardContent,\n    Grid,\n    Typography,\n    makeStyles,\n    Button,\n} from '@material-ui/core'\n\nconst types = ['album', 'artist', 'playlist', 'track']\n\nconst useStyles = makeStyles({\n    card: {\n        marginBottom: \"5%\",\n        width : \"100%\",\n        height: '100%',\n        borderRadius: 5,\n        border: '1px solid #1e8678',\n        boxShadow:\n            '0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);',\n    },\n    titleHead: {\n        fontWeight: 'bold',\n        Color: 'black !important',\n    },\n    grid: {\n        flexGrow: 1,\n        flexDirection: 'row',\n    },\n})\n\n\n\nconst UsePlayMusic = () => {\n\n    const { accessToken } = useContext(SpotifyContext)\n    const classes = useStyles()\n    const [search, setSearch] = useState('')\n    const [results, setResults] = useState([])\n    const { width } = useWindowDimensions()\n    const [hasError, setHasError] = useState(null)\n    const [searchType, setSearchType] = useState(null)\n\n    const baseUrl = `http://${window.location.hostname}:3000/spotify-api/search?q=`\n\n    useEffect(() => {\n        const value = search === '' ? \"A\" : search\n        console.log(`searchtype = ${searchType}`)\n\n        const url =\n            baseUrl +\n            value\n                .toLowerCase()\n                .split(' ')\n                .filter((word) => !types.includes(word))\n                .join(' ') +\n            '&type=track,album,playlist,artist&market=US&access_token=' +\n            accessToken\n        \n            axios\n                .get(url)\n                .then(({ data }) => {\n                    console.log(data)\n                    if (searchType === 'album') {\n                        setResults(data.albums.items)\n                    } else if (searchType === 'artist') {\n                        setResults(data.artists.items)\n                    } else if (searchType === 'playlist') {\n                        setResults(data.playlists.items)\n                    } else if (searchType === 'track') {\n                        setResults(data.tracks.items)\n                    } else {\n                        let res = data.playlists.items || []\n                        res = res.concat(data.artists.items || [])\n                        res = res.concat(data.albums.items || [])\n                        res = res.concat(data.tracks.items || [])\n                        setResults(res)\n                        setSearchType('all')\n                    }\n                })\n                .catch((err) => {\n                    console.log(err)\n                    setHasError(err)\n                })\n        \n    }, [search, searchType])\n\n    return {\n        search,\n        setSearch,\n        results,\n        width,\n        searchType,\n        setSearchType,\n        classes\n    }\n}\n\n\n\nconst PlayMusic = () => {\n    const {\n        search,\n        setSearch,\n        results,\n        setSearchType,\n        classes\n    } = UsePlayMusic()\n    const [sharePost, setSharePost] = useState(null)\n    const [showSharePostModal, setShowSharePostModal] = useState(null)\n    const [errorModal, setErrorModal] = useState(false)\n    const { currentUser } = useContext(AuthContext)\n\n    const handleSelect = (eventKey) => {\n        setSearchType(eventKey)\n    }\n\n    const handleOpenshareModal = (album) => {\n        console.log(album)\n        setShowSharePostModal(true)\n        setSharePost(album)\n        setErrorModal(true)\n    }\n\n    const handleCloseModals = () => {\n        setShowSharePostModal(false)\n        setErrorModal(false)\n    }\n\n    const buildCard = (album) => {\n        return (\n                <Card className={classes.card} variant=\"outlined\">\n                    <CardActionArea>\n                        <CardContent>\n                        <Grid container justify=\"space-between\">  \n                            <Typography inline variant=\"body1\" align=\"left\" class = {classes.titleHead}>\n                                <span>{album.name}</span>\n                                <br />\n                                <span>Track Number: {album.track_number}</span>\n                            </Typography>\n                            <Typography inline variant=\"body1\" align=\"right\">\n                                <Button variant=\"contained\" color=\"secondary\" \n                                onClick={() => {\n                                handleOpenshareModal(album)}}>\n                                    share\n                                </Button>\n                            </Typography>\n                        </Grid>                                                                          \n                        </CardContent>\n                    </CardActionArea>\n                    <iframe\n                        id=\"playSong\"\n                        src={'https://open.spotify.com/embed?uri=' + album.uri}\n                        width=\"100%\"\n                        height=\"500\"\n                        frameBorder=\"0\"\n                        allowtransparency=\"true\"\n                        allow=\"encrypted-media\"\n                    ></iframe>\n                    {currentUser\n                            ? showSharePostModal && (\n                                  <AddPostModal\n                                      isOpen={showSharePostModal}\n                                      handleClose={handleCloseModals}\n                                      title={'Share Post'}\n                                      data={null}\n                                      currentUser={currentUser.uid}\n                                      songData={sharePost}\n                                      postId={null}\n                                  />\n                              )\n                            : errorModal && (\n                                  <ShowErrorModal\n                                      isOpen={errorModal}\n                                      handleClose={handleCloseModals}\n                                      title={'Login Error'}\n                                  />\n                    )}\n                </Card>           \n        )\n    }\n\n    return(  \n        <div class=\"main\">\n            <Nav variant=\"tabs\" onSelect={handleSelect}>\n            <Nav.Item>\n                <Nav.Link eventKey=\"album\" href=\"#album\">Album </Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n                <Nav.Link eventKey=\"artist\" href=\"#artist\">Artist </Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n                <Nav.Link eventKey=\"track\" href=\"#track\">Track </Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n                <Nav.Link eventKey=\"playlist\" href=\"#playlist\"> Playlist </Nav.Link>\n            </Nav.Item>            \n            </Nav>\n\n\n        <div className=\"search\" style={{ width: '90%'}}>\n            <Icon\n                icon={faSearch}\n                color=\"#444\"\n            />\n            <input\n                className=\"search-input\"\n                placeholder=\"Search\"\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n            />\n        </div>\n\n        <br/> \n       \n        {results && results.length > 0 ? (\n        <div class=\"main\">\n           {results.map((song) => (                                  \n                <Grid container className={classes.grid} spacing={5}>\n                    {buildCard(song)}\n                </Grid>                    \n            ))}\n        </div>\n            ) : \n                <div><p> Currently no songs available </p></div>                                \n        }\n        </div>\n    )\n}\n\nexport default PlayMusic","/Users/mahvishsyed/Desktop/Github/cs554-music-platform/frontend/src/components/SignIn.js",[],"/Users/mahvishsyed/Desktop/Github/cs554-music-platform/frontend/src/pages/Home.jsx",["129"],{"ruleId":"130","severity":1,"message":"131","line":23,"column":7,"nodeType":"132","messageId":"133","endLine":23,"endColumn":26},{"ruleId":"130","severity":1,"message":"134","line":76,"column":12,"nodeType":"132","messageId":"133","endLine":76,"endColumn":20},{"ruleId":"135","severity":1,"message":"136","line":133,"column":21,"nodeType":"137","endLine":143,"endColumn":22},{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","replacedBy":"141"},{"ruleId":"130","severity":1,"message":"142","line":9,"column":5,"nodeType":"132","messageId":"133","endLine":9,"endColumn":11},{"ruleId":"130","severity":1,"message":"143","line":10,"column":5,"nodeType":"132","messageId":"133","endLine":10,"endColumn":13},{"ruleId":"138","replacedBy":"144"},{"ruleId":"140","replacedBy":"145"},{"ruleId":"130","severity":1,"message":"146","line":10,"column":5,"nodeType":"132","messageId":"133","endLine":10,"endColumn":9},{"ruleId":"130","severity":1,"message":"147","line":11,"column":5,"nodeType":"132","messageId":"133","endLine":11,"endColumn":14},{"ruleId":"130","severity":1,"message":"148","line":82,"column":22,"nodeType":"132","messageId":"133","endLine":82,"endColumn":33},{"ruleId":"130","severity":1,"message":"149","line":86,"column":21,"nodeType":"132","messageId":"133","endLine":86,"endColumn":31},{"ruleId":"130","severity":1,"message":"150","line":94,"column":12,"nodeType":"132","messageId":"133","endLine":94,"endColumn":17},{"ruleId":"130","severity":1,"message":"151","line":94,"column":19,"nodeType":"132","messageId":"133","endLine":94,"endColumn":27},{"ruleId":"152","severity":1,"message":"153","line":115,"column":8,"nodeType":"154","endLine":115,"endColumn":31,"suggestions":"155"},{"ruleId":"135","severity":1,"message":"136","line":147,"column":21,"nodeType":"137","endLine":155,"endColumn":22},{"ruleId":"130","severity":1,"message":"148","line":80,"column":22,"nodeType":"132","messageId":"133","endLine":80,"endColumn":33},{"ruleId":"130","severity":1,"message":"149","line":84,"column":21,"nodeType":"132","messageId":"133","endLine":84,"endColumn":31},{"ruleId":"130","severity":1,"message":"150","line":92,"column":12,"nodeType":"132","messageId":"133","endLine":92,"endColumn":17},{"ruleId":"130","severity":1,"message":"151","line":92,"column":19,"nodeType":"132","messageId":"133","endLine":92,"endColumn":27},{"ruleId":"152","severity":1,"message":"153","line":113,"column":8,"nodeType":"154","endLine":113,"endColumn":31,"suggestions":"156"},{"ruleId":"135","severity":1,"message":"136","line":145,"column":21,"nodeType":"137","endLine":153,"endColumn":22},{"ruleId":"138","replacedBy":"157"},{"ruleId":"140","replacedBy":"158"},{"ruleId":"130","severity":1,"message":"134","line":19,"column":12,"nodeType":"132","messageId":"133","endLine":19,"endColumn":20},{"ruleId":"152","severity":1,"message":"159","line":39,"column":8,"nodeType":"154","endLine":39,"endColumn":10,"suggestions":"160"},{"ruleId":"152","severity":1,"message":"161","line":85,"column":8,"nodeType":"154","endLine":85,"endColumn":16,"suggestions":"162"},{"ruleId":"130","severity":1,"message":"134","line":182,"column":9,"nodeType":"132","messageId":"133","endLine":182,"endColumn":17},{"ruleId":"130","severity":1,"message":"148","line":80,"column":22,"nodeType":"132","messageId":"133","endLine":80,"endColumn":33},{"ruleId":"130","severity":1,"message":"149","line":84,"column":21,"nodeType":"132","messageId":"133","endLine":84,"endColumn":31},{"ruleId":"152","severity":1,"message":"153","line":111,"column":8,"nodeType":"154","endLine":111,"endColumn":31,"suggestions":"163"},{"ruleId":"135","severity":1,"message":"136","line":143,"column":21,"nodeType":"137","endLine":151,"endColumn":22},{"ruleId":"130","severity":1,"message":"148","line":77,"column":22,"nodeType":"132","messageId":"133","endLine":77,"endColumn":33},{"ruleId":"130","severity":1,"message":"149","line":81,"column":21,"nodeType":"132","messageId":"133","endLine":81,"endColumn":31},{"ruleId":"130","severity":1,"message":"150","line":89,"column":12,"nodeType":"132","messageId":"133","endLine":89,"endColumn":17},{"ruleId":"130","severity":1,"message":"151","line":89,"column":19,"nodeType":"132","messageId":"133","endLine":89,"endColumn":27},{"ruleId":"152","severity":1,"message":"153","line":110,"column":8,"nodeType":"154","endLine":110,"endColumn":31,"suggestions":"164"},{"ruleId":"135","severity":1,"message":"136","line":141,"column":21,"nodeType":"137","endLine":149,"endColumn":22},{"ruleId":"130","severity":1,"message":"165","line":97,"column":25,"nodeType":"132","messageId":"133","endLine":97,"endColumn":29},{"ruleId":"130","severity":1,"message":"165","line":118,"column":21,"nodeType":"132","messageId":"133","endLine":118,"endColumn":25},{"ruleId":"130","severity":1,"message":"146","line":6,"column":10,"nodeType":"132","messageId":"133","endLine":6,"endColumn":14},{"ruleId":"130","severity":1,"message":"134","line":54,"column":12,"nodeType":"132","messageId":"133","endLine":54,"endColumn":20},{"ruleId":"152","severity":1,"message":"161","line":99,"column":8,"nodeType":"154","endLine":99,"endColumn":28,"suggestions":"166"},{"ruleId":"135","severity":1,"message":"136","line":164,"column":21,"nodeType":"137","endLine":172,"endColumn":22},{"ruleId":"130","severity":1,"message":"167","line":12,"column":12,"nodeType":"132","messageId":"133","endLine":12,"endColumn":30},"no-unused-vars","'PlayListByLoveSongs' is assigned a value but never used.","Identifier","unusedVar","'hasError' is assigned a value but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","no-native-reassign",["168"],"no-negated-in-lhs",["169"],"'faList' is defined but never used.","'faSearch' is defined but never used.",["168"],["169"],"'Link' is defined but never used.","'CardMedia' is defined but never used.","'setHasError' is assigned a value but never used.","'setAlbumId' is assigned a value but never used.","'state' is assigned a value but never used.","'setState' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'accessToken' and 'albumId'. Either include them or remove the dependency array.","ArrayExpression",["170"],["171"],["168"],["169"],"React Hook useEffect has a missing dependency: 'accessToken'. Either include it or remove the dependency array.",["172"],"React Hook useEffect has missing dependencies: 'accessToken' and 'baseUrl'. Either include them or remove the dependency array.",["173"],["174"],["175"],"'data' is assigned a value but never used.",["176"],"'spotifyAccessToken' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"177","fix":"178"},{"desc":"177","fix":"179"},{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},{"desc":"177","fix":"184"},{"desc":"177","fix":"185"},{"desc":"186","fix":"187"},"Update the dependencies array to be: [accessToken, albumId, props.match.params.id]",{"range":"188","text":"189"},{"range":"190","text":"189"},"Update the dependencies array to be: [accessToken]",{"range":"191","text":"192"},"Update the dependencies array to be: [accessToken, baseUrl, search]",{"range":"193","text":"194"},{"range":"195","text":"189"},{"range":"196","text":"189"},"Update the dependencies array to be: [accessToken, baseUrl, search, searchType]",{"range":"197","text":"198"},[3083,3106],"[accessToken, albumId, props.match.params.id]",[3052,3075],[1495,1497],"[accessToken]",[3312,3320],"[accessToken, baseUrl, search]",[3010,3033],[2991,3014],[3210,3230],"[accessToken, baseUrl, search, searchType]"]