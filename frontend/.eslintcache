[{"/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/index.js":"1","/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/pages/PostInsert.jsx":"2","/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/pages/Home.jsx":"3","/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/NavBar.jsx":"4","/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/SignOut.js":"5","/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/playListbyLoveSongs.js":"6","/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/Sidebar.jsx":"7","/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/playAlbum.js":"8","/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/SocialSignIn.js":"9","/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/Logo.jsx":"10","/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/app/index.js":"11","/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/Navigation.js":"12","/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/SignIn.js":"13","/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/SidebarRight.jsx":"14","/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/SignUp.js":"15","/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/firebase/Firebase.js":"16","/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/pages/index.js":"17","/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/firebase/Auth.js":"18","/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/firebase/FirebaseFunctions.js":"19"},{"size":174,"mtime":1606721953159,"results":"20","hashOfConfig":"21"},{"size":12271,"mtime":1606716469702,"results":"22","hashOfConfig":"21"},{"size":187,"mtime":1606721313106,"results":"23","hashOfConfig":"21"},{"size":620,"mtime":1606442762601,"results":"24","hashOfConfig":"21"},{"size":271,"mtime":1606442762602,"results":"25","hashOfConfig":"21"},{"size":5197,"mtime":1606721667965,"results":"26","hashOfConfig":"21"},{"size":692,"mtime":1606722298443,"results":"27","hashOfConfig":"21"},{"size":4858,"mtime":1606721666962,"results":"28","hashOfConfig":"21"},{"size":624,"mtime":1606442762603,"results":"29","hashOfConfig":"21"},{"size":436,"mtime":1606442762594,"results":"30","hashOfConfig":"21"},{"size":1585,"mtime":1606723944706,"results":"31","hashOfConfig":"21"},{"size":1050,"mtime":1606721668656,"results":"32","hashOfConfig":"21"},{"size":1853,"mtime":1606442762602,"results":"33","hashOfConfig":"21"},{"size":1758,"mtime":1606722369134,"results":"34","hashOfConfig":"21"},{"size":2315,"mtime":1606442762602,"results":"35","hashOfConfig":"21"},{"size":554,"mtime":1606442762603,"results":"36","hashOfConfig":"21"},{"size":90,"mtime":1606442762606,"results":"37","hashOfConfig":"21"},{"size":607,"mtime":1606442762603,"results":"38","hashOfConfig":"21"},{"size":2347,"mtime":1606442762604,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"211xq7",{"filePath":"42","messages":"43","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/index.js",[],"/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/pages/PostInsert.jsx",["87","88","89","90","91","92","93","94","95","96","97"],"import React, { useContext } from 'react'\nimport { useState, useEffect } from \"react\";\nimport axios from 'axios'\nimport { makeStyles, Card, CardContent,Typography, Button} from '@material-ui/core';\nimport Modal from 'react-bootstrap/Modal'\nimport { AuthContext } from \"../firebase/Auth\";\n\nconst useStyles = makeStyles({\n    \n    Button:{\n\t\tmarginleft:'.5%',\n        marginRight:'.5%',\n        \n    },\n    card: {\n        marginTop:'5%',\n\t\tmaxWidth: '50%',\n\t\theight: '100px',\n\t\tmarginLeft: 'auto',\n\t\tmarginRight: 'auto',\n\t\tborderRadius: 5,\n\t\tborder: '1px solid #1e8678',\n\t\tboxShadow: '0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);'\n    },\n    classLike: {\n        marginButtom: '0em',\n        height:'2em',\n        with: '1em',\n        marginLeft: '470px',\n        marginRight:'1%'\n    },\n    toprightCornerParent:{\n        display :\"flex\"\n    },\n\n    toprightCornerButton:{\n        // display :\"flex\",\n        marginleft : \"auto\",\n        // top: \"2px\",\n        // right: \"2px\",\n        // zindex: \"100\"\n    },\n    textFieldStyle: {\n        left: \".5%\",\n        right:\".5%\",\n        top: \".5%\",\n        bottom: \"25%\",\n        width : \"90%\",\n        margin: \"auto\",\n        background: \"white\",\n    }\n})\nfunction PostInsert() {\n    const classes = useStyles();\n    const { currentUser } = useContext(AuthContext);\n\n    const [post, setPost] = useState(null);\n    const [loading, setLoading] = useState(true);\n\n    const [comment, setCommentData] = useState(undefined);\n    const [songData, setSongData] = useState({});\n    const [postData, setPostData] = useState(null);\n    const [editPostData, seteditPostData] = useState(false);\n    const [postId, setPostId] = useState(null);\n\n    const [showAddModal, setShowAddModal] = useState(false);\n    const handleClose = () => setShowAddModal(false);\n    const handleShow = () => setShowAddModal(true);\n\n    /***\n     * Render all Post\n     */\n    useEffect(() => {\n        getAllPost() \n    },[showAddModal])\n    \n    const getAllPost = async () => {\n        try {\n            const { data } = await axios.get(\"http://localhost:3000/api/post\");\n            setPost(data); \n            setLoading(false);\n        } catch (e) {\n            console.log(`error found : ${e}`);\n        }\n    }\n\n    /***\n     * Handle comment hide/show\n     */\n    const isCommentExpand = (commentTap) => {       \n    }\n\n    /***\n     * Retrieve comment data from textfield\n     */\n    const handleCommentTextField = (e) => {\n        setCommentData(e.target.value)\n    }\n\n    /***\n     * save comment on given post \n     * render complete data\n     */\n    const saveComment = async (commentPost) => {\n        if(currentUser &&  currentUser.uid){\n            try {\n                const { commentData } = await axios.post(`http://localhost:3000/api/post/${commentPost._id}/comment`, {\n                userId : currentUser.uid,\n                commentText : comment\n                }); \n                getAllPost()\n                let field = document.getElementById(\"commentField\" + commentPost._id)\n                field.value = \"\"\n            } catch (error) {\n                throw `${error}`\n            }\n        }else{\n            let field = document.getElementById(\"commentField\" + commentPost._id)\n            field.value = \"\"\n            alert(\"Please LogIn to Comment on Post\")\n        }\n    }\n\n    /***\n     * Check if post liked by login user.\n     * \n     * if yes, then again tap on like button will unlike it and remove from liked list.\n     * \n     * If no, then post is liked, and added to liked list.\n     */\n    const handleLike = async (likedpost) => {\n        if(currentUser &&  currentUser.uid){\n        try {\n            let data = isLikedByUser(likedpost)\n\n            if(!data){\n                const { likeData } = await axios.post(`http://localhost:3000/api/post/${likedpost._id}/likes`, {\n                userId : currentUser.uid,\n             });\n\n            }else{\n                const { likeData } = await axios.delete(`http://localhost:3000/api/post/${likedpost._id}/likes/${data._id}`);\n            }           \n             getAllPost()\n            \n        } catch (e) {\n            console.log(`ERROR IN MAIN : ${e}`);\n        }\n    } else{\n        alert(\"Please LogIn to like Post\")\n    }\n    }\n\n    const isLikedByUser = (likePost) => {\n        if(currentUser && currentUser.uid){ \n        let likeArray = likePost[\"likesArray\"]\n\n        if(likeArray.length > 0){\n          let data = likeArray.filter(function(item){\n                       return currentUser.uid === item[\"userId\"];\n                   });\n           if(data) return data[0]\n        }\n        return null\n     }\n       \n    }\n        \n    /***\n     * Get Post data from post textfield\n     */\n    const handleTextField = async(e) => {\n        setPostData(e.target.value)\n    }\n\n    /***\n     * If user logged in , then allow to add, edit or delete post\n     * Else show message \"You must log in to post\"\n     * Once posted , save post\n     */\n    const handleAddPost = async () => {\n        if(currentUser &&  currentUser.uid){\n            try {\n                const { data } = await axios.post(\"http://localhost:3000/api/post\", {\n                   userId : currentUser.uid, // pass valid userid here\n                   text : postData,\n                   songData: songData,\n                   commentsArray :[],\n                   likesArray : []\n                });\n                handleClose()\n               \n             } catch (e) {\n                console.log(`ERROR IN ADD POST : ${e}`);\n             } \n        }else{\n            alert(\"You must logged in to Post on SpotifyTwitter\")\n        }     \n    };\n\n    /**\n     * Edit given post ,\n     * only if logged In uploaded that post,\n     */\n    const editPost = async (argPost) => {\n        if(currentUser && currentUser.uid && currentUser.uid === argPost.userId){\n            seteditPostData(true)  //set edit mode true\n            setPostId(argPost._id) //set postId\n            setPostData(argPost.text) // set pre text into textfield\n            setShowAddModal(true) // show modal in edit mode         \n        }else{\n            alert(\"Invalid user to edit post\")\n        }\n\n    }\n    const handleEditPost = async () => {\n        try {\n            const { data } = await axios.patch(`http://localhost:3000/api/post/${postId}`, {\n                text : postData,\n            });\n            seteditPostData(false) // set edit mode off\n            handleClose() // close modal\n            setPostId(null) // set post Id to null after edit\n                   \n        } catch (e) {\n            console.log(`ERROR IN EDIT POST : ${e}`);\n        }   \n    }\n        \n\n    /**\n     * Delete given post ,\n     * only if logged In uploaded that post,\n     */\n    const deletePost = async (argPost) => {\n        if(currentUser && currentUser.uid && currentUser.uid === argPost.userId){\n            try {\n                const { data } = await axios.delete(`http://localhost:3000/api/post/${argPost._id}`)\n                getAllPost()\n            } catch (error) {\n                console.log(`ERROR IN DELETE POST : ${error}`);\n            }\n            \n        }\n    }\n\n    /**\n     * Delete given comment ,\n     * only if logged In commented ,\n     */\n    const deleteComment = async (argPost, argComment) => {\n        if(currentUser && currentUser.uid && currentUser.uid === argComment.userId){\n            try {\n                const { data } = await axios.delete(`http://localhost:3000/api/post/${argPost._id}/comment/${argComment._id}`)\n                getAllPost()\n            } catch (error) {\n                console.log(`ERROR IN DELETE COMMENT : ${error}`);\n            }           \n        }else{\n            console.log(`currentUSer=${currentUser.uid}, commentUser=${argComment.userId}, postId= http://localhost:3000/api/post/${argPost._id}/comment/${argComment._id}`)\n        }\n    }\n\n    const showAddPostModal = () => {\n        if(currentUser){\n            handleShow()\n        }else{\n            alert(\"Please logIn to add post\")\n        }\n    }\n\n    const hideEditMode = (currentData) => {\n        if(currentUser && currentUser.uid && currentUser.uid === currentData.userId){\n            return false\n        }\n        return true\n    }\n\n    return (\n        <div className=\"main\">\n            <div>\n            {/* add post */}\n            <button onClick={() => showAddPostModal()}>Add Post</button>\n            </div>\n\n            <Modal show={showAddModal} onHide={handleClose}>\n            <Modal.Header closeButton>\n            <Modal.Title>{editPostData ? \"EditPost\" : \"Add Post\"}</Modal.Title>        \n            </Modal.Header>  \n            <Modal.Body> \n            <textarea  className={classes.textFieldStyle} id=\"txtPost\" value={editPostData ? postData : null} type='text' placeholder=\"Enter Post here....\" rows=\"4\" onChange={handleTextField}/>\n            </Modal.Body>\n            <Modal.Footer>\n            <Button variant=\"contained\" color='secondary' size='medium' type=\"reset\" defaultValue=\"Reset\"  onClick={() => {editPostData? handleEditPost() : handleAddPost()}}>Enter</Button>\n            <Button onClick={handleClose}> Cancel </Button> \n            </Modal.Footer>\n            </Modal>\n\n            {/* display post */}\n            <ul> {(post && post.length > 0) ? (post.map(product =>\n             \n                <li key={product._id} className=\"list__item product\">\n                <div>\n                    <Card className={classes.card} variant='outlined'>\n                    <CardContent>\n                        <Typography  gutterBottom variant='h6' component='h2'>\n                            {product.text}\n                            <div class={classes.toprightCornerParent} hidden={hideEditMode(product)}> \n                            <Button id={\"edit\" + product._id} className={classes.toprightCornerButton} variant=\"contained\" color=\"primary\" size='medium' onClick={() => editPost(product)}>Edit</Button>\n                            <Button id={\"delete\" + product._id} className={classes.toprightCornerButton} variant=\"contained\" color=\"primary\" size='medium' onClick={() => deletePost(product)}>Delete</Button>\n                            </div>                          \n                        </Typography>\n\n                    </CardContent> \n                    </Card>\n    \n                    <Button id={\"like\" + product._id} className={classes.classLike} variant=\"contained\" color={isLikedByUser(product) ? \"primary\" : \"inherit\" } size='medium' onClick={() => handleLike(product)}>{product.likesArray ? product.likesArray.length : 0 } Like</Button>\n                    <Button id={\"comment\" + product._id} variant=\"contained\" color='secondary' size='medium'  onClick={() => isCommentExpand(product)}>{product.commentsArray ? product.commentsArray.length : 0} Comment</Button>\n                       \n                        <ul>\n                          {(product[\"commentsArray\"] && product[\"commentsArray\"].length > 0) ? (product[\"commentsArray\"].map(commentItem =>\n                            \n                            <li className={classes.classLike} key={commentItem._id} className=\"list__item product\">\n                                {commentItem[\"commentText\"]}\n                                <div hidden={hideEditMode(commentItem)}> \n                                <Button id={\"delete\" + commentItem._id} variant=\"contained\" color=\"primary\" size='medium' onClick={() => deleteComment(product, commentItem)}>Delete</Button>\n                                </div>\n                            </li>\n                          \n                         )) : (<p>No Comment</p>)}\n                        </ul>\n                       \n                       <textarea className={classes.textFieldStyle} id={\"commentField\" + product._id} type='text' placeholder=\"Enter Comment here....\" rows=\"2\" onChange={handleCommentTextField}/>\n                       <Button  variant=\"contained\" color='secondary' size='medium' type=\"reset\" defaultValue=\"Reset\"  onClick={() => saveComment(product)}>Enter</Button>         \n                 </div>\n              </li>\n                \n        )) : (<p>No Post</p>)}\n        </ul>\n\n            \n        </div>\n    );\n}\n\nexport default PostInsert",["98","99"],"/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/pages/Home.jsx",[],["100","101"],"/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/NavBar.jsx",[],["102","103"],"/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/SignOut.js",[],"/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/playListbyLoveSongs.js",["104","105","106","107","108","109","110"],"import React, { useState, useEffect } from 'react';\nimport { Card, CardActionArea, CardContent, Grid, Typography, makeStyles,Button } from '@material-ui/core';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport Modal from 'react-bootstrap/Modal';\nimport { AuthContext } from \"../firebase/Auth\";\n\nlet Spotify = require('spotify-web-api-js');\n// var s = new Spotify();\n\nlet spotifyApi = new SpotifyWebApi();\n\nspotifyApi.setAccessToken('BQCACMJEq9tHcc0SC6D0B2DxyBPeaxJlUfnh9o4M_JwlDQxTVX3rrgfvs-O_oZMmXOi4xVMEaNxCbZDjeqv1eaJtKqsPrKjYq95PJ7-Hu200V1RSbr7V6UW8MLv8vv-XKsPzoTpNojjeO-arkuI64gZr2Lb8YOJ5AGKuLAUzeNojVkWz');\n\nconst useStyles = makeStyles({\n\tcard: {\n\t\tmaxWidth: 350,\n\t\theight: 'auto',\n\t\tmarginLeft: 'auto',\n\t\tmarginRight: 'auto',\n\t\tborderRadius: 5,\n\t\tborder: '1px solid #1e8678',\n\t\tboxShadow: '0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);'\n\t},\n\ttitleHead: {\n\t\tborderBottom: '1px solid #1e8678',\n\t\tfontWeight: 'bold',\n\t\tColor: 'black !important'\n\t},\n\tgrid: {\n\t\tflexGrow: 1,\n\t\tflexDirection: 'row'\n\t},\n\n\tmodal: {\n\t\ttop: '50%',\n\t\tleft: '20%',\n\t\tright: 'auto',\n\t\t// bottom: '90%',\n\t\tmarginRight: '50%',\n\t\ttransform: 'translate(10%, -50%)',\n\t\twidth: '50%',\n\t\t// border: '1px solid #28547a',\n\t\tborderRadius: '4px',\n\t\tfloat:'left'\n\t\t// background:'lightblue'\n\t  },\n\n\t  textFieldStyle: {\n        left: \".5%\",\n        right:\".5%\",\n        top: \".5%\",\n        bottom: \"25%\",\n        width : \"90%\",\n        margin: \"auto\",\n        background: \"white\",\n\t},\n\t\n\tbuttonClass:{\n\t\tmarginLeft:'40%'\n\t}\n\n});\n\n\n\nconst PlayListByLoveSongs = (props) => {\n    const [playListData, setPlayListData,] = useState(undefined);\n    const classes = useStyles();\n    const [hasError, setHasError] = useState(false);\n\tconst [loading, setLoading] = useState(true);\n\tconst [sharePost, setSharePost] = useState(null);;\n    const [showSharePostModal, setShowSharePostModal] = useState(null);\n\t\n\tconst [showAddModal, setShowAddModal] = useState(false);\n    const handleClose = () => setShowAddModal(false);\n\tconst handleShow = () => setShowAddModal(true);\n\t\n\n    let card = null;\n\tuseEffect(() => {\n\t\tconsole.log('on load useeffect');\n\t\tasync function fetchData() {\n\t\t\ttry {\n\t\t\t\tconsole.log('hi there');\n                spotifyApi.searchTracks('Love').then(\n                    function (data) {\n                        setPlayListData(data.tracks.items);\n                        setLoading(false);\n                    \n                    },\n                    function (err) {\n                      setHasError(err);\n                    }\n                  );\n                  \n\t\t\t} catch (e) {\n\t\t\t\tsetHasError(e.message);\n\t\t\t}\n\t\t}\n\t\tfetchData();\n\t}, []);\n\t\n\tconst handleOpenshareModal = (trackDetails) => {\n        setShowSharePostModal(true);\n        setSharePost(trackDetails);\n        console.log(trackDetails);\n\t  };\n\t  \n\t  const handleCloseModals = () => {\n       setShowSharePostModal(false);\n\t  };\n\n\t\tconst buildCard = (playList) => {\n\t\t\treturn (\n\t\t\t\t<Grid item xs={12} sm={6} md={4} lg={4} xl={2} key={playList.id}>\n\t\t\t\t\t<Card className={classes.card} variant='outlined'>\n\t\t\t\t\t\t<CardActionArea>\n\t\t\t\t\t\t<a href= {playList.external_urls.spotify}>Go to Spotify</a>\n\t\t\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t\t\t<Typography className={classes.titleHead} gutterBottom variant='h6' component='h3'>\n\t\t\t\t\t\t\t\t\t\t<span>{playList.name}</span><br/>\n\t\t\t\t\t\t\t\t\t\t<span>Popularity: {playList.popularity}</span>\n\t\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t</CardActionArea>\n\t\t\t\t\t\t<iframe id=\"playSong\" src= {\"https://open.spotify.com/embed?uri=\"+ playList.uri}\n\t\t\t\t\t\twidth=\"300\" height=\"380\" frameborder=\"0\" allowtransparency=\"true\"></iframe>\n\t\t\t\t\t\t<div className=\"e-card-actions e-card-vertical\">\n\t\t\t\t\t\t<Button variant=\"contained\" color='secondary' className={classes.buttonClass}\n\t\t\t\t\t  onClick={() => {\n\t\t\t\t\t\thandleOpenshareModal(playList);\n\t\t\t\t\t  }}>\n\t\t\t\t\t  share\n\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t</Card>\n\t\t\t\t</Grid>\n\t\t\t);\n\t\t};\n\t\tif (playListData) {\n\t\t\tconsole.log(playListData);\n\t\t\tcard =\n\t\t\tplayListData &&\n\t\t\tplayListData.filter(x => x.available_markets.some(y => y.includes(\"US\"))).map((playList) => {\n\t\t\t\treturn buildCard(playList);\n\t\t\t});\n\t\t\t}\n\t\t\n\tif (loading) {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h2>Loading....</h2>\n\t\t\t</div>\n\t\t);\n\t}\n\t\n\telse{\n\t\treturn(\n\t\t<div>\n\t\t<>  \n\t\t<Modal className={classes.modal} show={showSharePostModal} onHide={handleCloseModals}>\n\t\t  <Modal.Header closeButton>\n\t\t\t<Modal.Title>Modal heading</Modal.Title>\n\t\t  </Modal.Header>\n\t\t  <textarea className={classes.textFieldStyle} type='text' placeholder=\"you can enter description here....\" rows=\"3\" />\n\t\t  <Modal.Body><textarea className={classes.textFieldStyle} value={sharePost? 'name:'+sharePost.name+' href:'+sharePost.href+' id:'+sharePost.id+' img:'+sharePost.album.images[0].url : ''} rows=\"5\" ></textarea></Modal.Body>\n\t\t  <Modal.Footer>\n\t\t\t<Button variant=\"contained\" color='secondary' onClick={handleCloseModals}>\n\t\t\t  Close\n\t\t\t</Button>\n\t\t\t<Button variant=\"contained\" color='primary'  onClick={handleCloseModals}>\n\t\t\t  Save Changes\n\t\t\t</Button>\n\t\t  </Modal.Footer>\n\t\t</Modal>\n\t  </>\n\n\n\t\t\n\t\t<Grid container className={classes.grid} spacing={5}>\n\t\t\t\t\t\t{card}\n\t\t\t\t\t</Grid>\n\t\t\t\t</div>)\n\t}\n}\n\nexport default PlayListByLoveSongs;",["111","112"],"/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/Sidebar.jsx",[],"/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/playAlbum.js",["113","114","115"],"/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/SocialSignIn.js",[],["116","117"],"/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/Logo.jsx",[],["118","119"],"/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/app/index.js",[],["120","121"],"/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/Navigation.js",[],"/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/SignIn.js",[],"/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/SidebarRight.jsx",[],"/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/components/SignUp.js",[],"/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/firebase/Firebase.js",[],"/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/pages/index.js",[],"/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/firebase/Auth.js",[],"/Users/hayden/coursework/CS-554 Web Programming II/cs554-music-platform/frontend/src/firebase/FirebaseFunctions.js",["122"],{"ruleId":"123","severity":1,"message":"124","line":58,"column":12,"nodeType":"125","messageId":"126","endLine":58,"endColumn":19},{"ruleId":"123","severity":1,"message":"127","line":61,"column":22,"nodeType":"125","messageId":"126","endLine":61,"endColumn":33},{"ruleId":"123","severity":1,"message":"128","line":107,"column":25,"nodeType":"125","messageId":"126","endLine":107,"endColumn":36},{"ruleId":"129","severity":1,"message":"130","line":115,"column":17,"nodeType":"131","messageId":"132","endLine":115,"endColumn":33},{"ruleId":"123","severity":1,"message":"133","line":137,"column":25,"nodeType":"125","messageId":"126","endLine":137,"endColumn":33},{"ruleId":"123","severity":1,"message":"133","line":142,"column":25,"nodeType":"125","messageId":"126","endLine":142,"endColumn":33},{"ruleId":"123","severity":1,"message":"134","line":184,"column":25,"nodeType":"125","messageId":"126","endLine":184,"endColumn":29},{"ruleId":"123","severity":1,"message":"134","line":218,"column":21,"nodeType":"125","messageId":"126","endLine":218,"endColumn":25},{"ruleId":"123","severity":1,"message":"134","line":238,"column":25,"nodeType":"125","messageId":"126","endLine":238,"endColumn":29},{"ruleId":"123","severity":1,"message":"134","line":254,"column":25,"nodeType":"125","messageId":"126","endLine":254,"endColumn":29},{"ruleId":"135","severity":1,"message":"136","line":323,"column":85,"nodeType":"137","endLine":323,"endColumn":115},{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","replacedBy":"141"},{"ruleId":"138","replacedBy":"142"},{"ruleId":"140","replacedBy":"143"},{"ruleId":"138","replacedBy":"144"},{"ruleId":"140","replacedBy":"145"},{"ruleId":"123","severity":1,"message":"146","line":5,"column":10,"nodeType":"125","messageId":"126","endLine":5,"endColumn":21},{"ruleId":"123","severity":1,"message":"147","line":7,"column":5,"nodeType":"125","messageId":"126","endLine":7,"endColumn":12},{"ruleId":"123","severity":1,"message":"148","line":69,"column":12,"nodeType":"125","messageId":"126","endLine":69,"endColumn":20},{"ruleId":"123","severity":1,"message":"149","line":74,"column":9,"nodeType":"125","messageId":"126","endLine":74,"endColumn":21},{"ruleId":"123","severity":1,"message":"150","line":75,"column":11,"nodeType":"125","messageId":"126","endLine":75,"endColumn":22},{"ruleId":"123","severity":1,"message":"151","line":76,"column":8,"nodeType":"125","messageId":"126","endLine":76,"endColumn":18},{"ruleId":"152","severity":1,"message":"153","line":127,"column":7,"nodeType":"154","endLine":128,"endColumn":73},{"ruleId":"138","replacedBy":"155"},{"ruleId":"140","replacedBy":"156"},{"ruleId":"123","severity":1,"message":"146","line":5,"column":10,"nodeType":"125","messageId":"126","endLine":5,"endColumn":21},{"ruleId":"123","severity":1,"message":"147","line":7,"column":5,"nodeType":"125","messageId":"126","endLine":7,"endColumn":12},{"ruleId":"152","severity":1,"message":"153","line":122,"column":8,"nodeType":"154","endLine":123,"endColumn":74},{"ruleId":"138","replacedBy":"157"},{"ruleId":"140","replacedBy":"158"},{"ruleId":"138","replacedBy":"159"},{"ruleId":"140","replacedBy":"160"},{"ruleId":"138","replacedBy":"161"},{"ruleId":"140","replacedBy":"162"},{"ruleId":"163","severity":1,"message":"164","line":5,"column":66,"nodeType":"165","messageId":"166","endLine":5,"endColumn":77},"no-unused-vars","'loading' is assigned a value but never used.","Identifier","unusedVar","'setSongData' is assigned a value but never used.","'commentData' is assigned a value but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'likeData' is assigned a value but never used.","'data' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-native-reassign",["167"],"no-negated-in-lhs",["168"],["167"],["168"],["167"],["168"],"'AuthContext' is defined but never used.","'Spotify' is assigned a value but never used.","'hasError' is assigned a value but never used.","'showAddModal' is assigned a value but never used.","'handleClose' is assigned a value but never used.","'handleShow' is assigned a value but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement",["167"],["168"],["167"],["168"],["167"],["168"],["167"],["168"],"no-dupe-keys","Duplicate key 'displayName'.","ObjectExpression","unexpected","no-global-assign","no-unsafe-negation"]